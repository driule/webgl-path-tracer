!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=6)}([function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"EPSILON",(function(){return h})),n.d(r,"ARRAY_TYPE",(function(){return m})),n.d(r,"RANDOM",(function(){return g})),n.d(r,"setMatrixArrayType",(function(){return v})),n.d(r,"toRadian",(function(){return y})),n.d(r,"equals",(function(){return b}));var i={};n.r(i),n.d(i,"create",(function(){return T})),n.d(i,"clone",(function(){return x})),n.d(i,"copy",(function(){return M})),n.d(i,"identity",(function(){return E})),n.d(i,"fromValues",(function(){return w})),n.d(i,"set",(function(){return S})),n.d(i,"transpose",(function(){return L})),n.d(i,"invert",(function(){return I})),n.d(i,"adjoint",(function(){return R})),n.d(i,"determinant",(function(){return A})),n.d(i,"multiply",(function(){return B})),n.d(i,"rotate",(function(){return P})),n.d(i,"scale",(function(){return D})),n.d(i,"fromRotation",(function(){return _})),n.d(i,"fromScaling",(function(){return U})),n.d(i,"str",(function(){return C})),n.d(i,"frob",(function(){return F})),n.d(i,"LDU",(function(){return z})),n.d(i,"add",(function(){return O})),n.d(i,"subtract",(function(){return V})),n.d(i,"exactEquals",(function(){return N})),n.d(i,"equals",(function(){return k})),n.d(i,"multiplyScalar",(function(){return q})),n.d(i,"multiplyScalarAndAdd",(function(){return G})),n.d(i,"mul",(function(){return X})),n.d(i,"sub",(function(){return j}));var a={};n.r(a),n.d(a,"create",(function(){return H})),n.d(a,"clone",(function(){return Y})),n.d(a,"copy",(function(){return W})),n.d(a,"identity",(function(){return Z})),n.d(a,"fromValues",(function(){return K})),n.d(a,"set",(function(){return Q})),n.d(a,"invert",(function(){return $})),n.d(a,"determinant",(function(){return J})),n.d(a,"multiply",(function(){return tt})),n.d(a,"rotate",(function(){return et})),n.d(a,"scale",(function(){return nt})),n.d(a,"translate",(function(){return rt})),n.d(a,"fromRotation",(function(){return it})),n.d(a,"fromScaling",(function(){return at})),n.d(a,"fromTranslation",(function(){return ot})),n.d(a,"str",(function(){return ut})),n.d(a,"frob",(function(){return st})),n.d(a,"add",(function(){return ct})),n.d(a,"subtract",(function(){return lt})),n.d(a,"multiplyScalar",(function(){return dt})),n.d(a,"multiplyScalarAndAdd",(function(){return ft})),n.d(a,"exactEquals",(function(){return ht})),n.d(a,"equals",(function(){return mt})),n.d(a,"mul",(function(){return gt})),n.d(a,"sub",(function(){return vt}));var o={};n.r(o),n.d(o,"create",(function(){return pt})),n.d(o,"fromMat4",(function(){return yt})),n.d(o,"clone",(function(){return bt})),n.d(o,"copy",(function(){return Tt})),n.d(o,"fromValues",(function(){return xt})),n.d(o,"set",(function(){return Mt})),n.d(o,"identity",(function(){return Et})),n.d(o,"transpose",(function(){return wt})),n.d(o,"invert",(function(){return St})),n.d(o,"adjoint",(function(){return Lt})),n.d(o,"determinant",(function(){return It})),n.d(o,"multiply",(function(){return Rt})),n.d(o,"translate",(function(){return At})),n.d(o,"rotate",(function(){return Bt})),n.d(o,"scale",(function(){return Pt})),n.d(o,"fromTranslation",(function(){return Dt})),n.d(o,"fromRotation",(function(){return _t})),n.d(o,"fromScaling",(function(){return Ut})),n.d(o,"fromMat2d",(function(){return Ct})),n.d(o,"fromQuat",(function(){return Ft})),n.d(o,"normalFromMat4",(function(){return zt})),n.d(o,"projection",(function(){return Ot})),n.d(o,"str",(function(){return Vt})),n.d(o,"frob",(function(){return Nt})),n.d(o,"add",(function(){return kt})),n.d(o,"subtract",(function(){return qt})),n.d(o,"multiplyScalar",(function(){return Gt})),n.d(o,"multiplyScalarAndAdd",(function(){return Xt})),n.d(o,"exactEquals",(function(){return jt})),n.d(o,"equals",(function(){return Ht})),n.d(o,"mul",(function(){return Yt})),n.d(o,"sub",(function(){return Wt}));var u={};n.r(u),n.d(u,"create",(function(){return Zt})),n.d(u,"clone",(function(){return Kt})),n.d(u,"copy",(function(){return Qt})),n.d(u,"fromValues",(function(){return $t})),n.d(u,"set",(function(){return Jt})),n.d(u,"identity",(function(){return te})),n.d(u,"transpose",(function(){return ee})),n.d(u,"invert",(function(){return ne})),n.d(u,"adjoint",(function(){return re})),n.d(u,"determinant",(function(){return ie})),n.d(u,"multiply",(function(){return ae})),n.d(u,"translate",(function(){return oe})),n.d(u,"scale",(function(){return ue})),n.d(u,"rotate",(function(){return se})),n.d(u,"rotateX",(function(){return ce})),n.d(u,"rotateY",(function(){return le})),n.d(u,"rotateZ",(function(){return de})),n.d(u,"fromTranslation",(function(){return fe})),n.d(u,"fromScaling",(function(){return he})),n.d(u,"fromRotation",(function(){return me})),n.d(u,"fromXRotation",(function(){return ge})),n.d(u,"fromYRotation",(function(){return ve})),n.d(u,"fromZRotation",(function(){return pe})),n.d(u,"fromRotationTranslation",(function(){return ye})),n.d(u,"fromQuat2",(function(){return be})),n.d(u,"getTranslation",(function(){return Te})),n.d(u,"getScaling",(function(){return xe})),n.d(u,"getRotation",(function(){return Me})),n.d(u,"fromRotationTranslationScale",(function(){return Ee})),n.d(u,"fromRotationTranslationScaleOrigin",(function(){return we})),n.d(u,"fromQuat",(function(){return Se})),n.d(u,"frustum",(function(){return Le})),n.d(u,"perspective",(function(){return Ie})),n.d(u,"perspectiveFromFieldOfView",(function(){return Re})),n.d(u,"ortho",(function(){return Ae})),n.d(u,"lookAt",(function(){return Be})),n.d(u,"targetTo",(function(){return Pe})),n.d(u,"str",(function(){return De})),n.d(u,"frob",(function(){return _e})),n.d(u,"add",(function(){return Ue})),n.d(u,"subtract",(function(){return Ce})),n.d(u,"multiplyScalar",(function(){return Fe})),n.d(u,"multiplyScalarAndAdd",(function(){return ze})),n.d(u,"exactEquals",(function(){return Oe})),n.d(u,"equals",(function(){return Ve})),n.d(u,"mul",(function(){return Ne})),n.d(u,"sub",(function(){return ke}));var s={};n.r(s),n.d(s,"create",(function(){return qe})),n.d(s,"clone",(function(){return Ge})),n.d(s,"length",(function(){return Xe})),n.d(s,"fromValues",(function(){return je})),n.d(s,"copy",(function(){return He})),n.d(s,"set",(function(){return Ye})),n.d(s,"add",(function(){return We})),n.d(s,"subtract",(function(){return Ze})),n.d(s,"multiply",(function(){return Ke})),n.d(s,"divide",(function(){return Qe})),n.d(s,"ceil",(function(){return $e})),n.d(s,"floor",(function(){return Je})),n.d(s,"min",(function(){return tn})),n.d(s,"max",(function(){return en})),n.d(s,"round",(function(){return nn})),n.d(s,"scale",(function(){return rn})),n.d(s,"scaleAndAdd",(function(){return an})),n.d(s,"distance",(function(){return on})),n.d(s,"squaredDistance",(function(){return un})),n.d(s,"squaredLength",(function(){return sn})),n.d(s,"negate",(function(){return cn})),n.d(s,"inverse",(function(){return ln})),n.d(s,"normalize",(function(){return dn})),n.d(s,"dot",(function(){return fn})),n.d(s,"cross",(function(){return hn})),n.d(s,"lerp",(function(){return mn})),n.d(s,"hermite",(function(){return gn})),n.d(s,"bezier",(function(){return vn})),n.d(s,"random",(function(){return pn})),n.d(s,"transformMat4",(function(){return yn})),n.d(s,"transformMat3",(function(){return bn})),n.d(s,"transformQuat",(function(){return Tn})),n.d(s,"rotateX",(function(){return xn})),n.d(s,"rotateY",(function(){return Mn})),n.d(s,"rotateZ",(function(){return En})),n.d(s,"angle",(function(){return wn})),n.d(s,"zero",(function(){return Sn})),n.d(s,"str",(function(){return Ln})),n.d(s,"exactEquals",(function(){return In})),n.d(s,"equals",(function(){return Rn})),n.d(s,"sub",(function(){return Bn})),n.d(s,"mul",(function(){return Pn})),n.d(s,"div",(function(){return Dn})),n.d(s,"dist",(function(){return _n})),n.d(s,"sqrDist",(function(){return Un})),n.d(s,"len",(function(){return Cn})),n.d(s,"sqrLen",(function(){return Fn})),n.d(s,"forEach",(function(){return zn}));var c={};n.r(c),n.d(c,"create",(function(){return On})),n.d(c,"clone",(function(){return Vn})),n.d(c,"fromValues",(function(){return Nn})),n.d(c,"copy",(function(){return kn})),n.d(c,"set",(function(){return qn})),n.d(c,"add",(function(){return Gn})),n.d(c,"subtract",(function(){return Xn})),n.d(c,"multiply",(function(){return jn})),n.d(c,"divide",(function(){return Hn})),n.d(c,"ceil",(function(){return Yn})),n.d(c,"floor",(function(){return Wn})),n.d(c,"min",(function(){return Zn})),n.d(c,"max",(function(){return Kn})),n.d(c,"round",(function(){return Qn})),n.d(c,"scale",(function(){return $n})),n.d(c,"scaleAndAdd",(function(){return Jn})),n.d(c,"distance",(function(){return tr})),n.d(c,"squaredDistance",(function(){return er})),n.d(c,"length",(function(){return nr})),n.d(c,"squaredLength",(function(){return rr})),n.d(c,"negate",(function(){return ir})),n.d(c,"inverse",(function(){return ar})),n.d(c,"normalize",(function(){return or})),n.d(c,"dot",(function(){return ur})),n.d(c,"cross",(function(){return sr})),n.d(c,"lerp",(function(){return cr})),n.d(c,"random",(function(){return lr})),n.d(c,"transformMat4",(function(){return dr})),n.d(c,"transformQuat",(function(){return fr})),n.d(c,"zero",(function(){return hr})),n.d(c,"str",(function(){return mr})),n.d(c,"exactEquals",(function(){return gr})),n.d(c,"equals",(function(){return vr})),n.d(c,"sub",(function(){return pr})),n.d(c,"mul",(function(){return yr})),n.d(c,"div",(function(){return br})),n.d(c,"dist",(function(){return Tr})),n.d(c,"sqrDist",(function(){return xr})),n.d(c,"len",(function(){return Mr})),n.d(c,"sqrLen",(function(){return Er})),n.d(c,"forEach",(function(){return wr}));var l={};n.r(l),n.d(l,"create",(function(){return Sr})),n.d(l,"identity",(function(){return Lr})),n.d(l,"setAxisAngle",(function(){return Ir})),n.d(l,"getAxisAngle",(function(){return Rr})),n.d(l,"multiply",(function(){return Ar})),n.d(l,"rotateX",(function(){return Br})),n.d(l,"rotateY",(function(){return Pr})),n.d(l,"rotateZ",(function(){return Dr})),n.d(l,"calculateW",(function(){return _r})),n.d(l,"slerp",(function(){return Ur})),n.d(l,"random",(function(){return Cr})),n.d(l,"invert",(function(){return Fr})),n.d(l,"conjugate",(function(){return zr})),n.d(l,"fromMat3",(function(){return Or})),n.d(l,"fromEuler",(function(){return Vr})),n.d(l,"str",(function(){return Nr})),n.d(l,"clone",(function(){return Yr})),n.d(l,"fromValues",(function(){return Wr})),n.d(l,"copy",(function(){return Zr})),n.d(l,"set",(function(){return Kr})),n.d(l,"add",(function(){return Qr})),n.d(l,"mul",(function(){return $r})),n.d(l,"scale",(function(){return Jr})),n.d(l,"dot",(function(){return ti})),n.d(l,"lerp",(function(){return ei})),n.d(l,"length",(function(){return ni})),n.d(l,"len",(function(){return ri})),n.d(l,"squaredLength",(function(){return ii})),n.d(l,"sqrLen",(function(){return ai})),n.d(l,"normalize",(function(){return oi})),n.d(l,"exactEquals",(function(){return ui})),n.d(l,"equals",(function(){return si})),n.d(l,"rotationTo",(function(){return ci})),n.d(l,"sqlerp",(function(){return li})),n.d(l,"setAxes",(function(){return di}));var d={};n.r(d),n.d(d,"create",(function(){return fi})),n.d(d,"clone",(function(){return hi})),n.d(d,"fromValues",(function(){return mi})),n.d(d,"fromRotationTranslationValues",(function(){return gi})),n.d(d,"fromRotationTranslation",(function(){return vi})),n.d(d,"fromTranslation",(function(){return pi})),n.d(d,"fromRotation",(function(){return yi})),n.d(d,"fromMat4",(function(){return bi})),n.d(d,"copy",(function(){return Ti})),n.d(d,"identity",(function(){return xi})),n.d(d,"set",(function(){return Mi})),n.d(d,"getReal",(function(){return Ei})),n.d(d,"getDual",(function(){return wi})),n.d(d,"setReal",(function(){return Si})),n.d(d,"setDual",(function(){return Li})),n.d(d,"getTranslation",(function(){return Ii})),n.d(d,"translate",(function(){return Ri})),n.d(d,"rotateX",(function(){return Ai})),n.d(d,"rotateY",(function(){return Bi})),n.d(d,"rotateZ",(function(){return Pi})),n.d(d,"rotateByQuatAppend",(function(){return Di})),n.d(d,"rotateByQuatPrepend",(function(){return _i})),n.d(d,"rotateAroundAxis",(function(){return Ui})),n.d(d,"add",(function(){return Ci})),n.d(d,"multiply",(function(){return Fi})),n.d(d,"mul",(function(){return zi})),n.d(d,"scale",(function(){return Oi})),n.d(d,"dot",(function(){return Vi})),n.d(d,"lerp",(function(){return Ni})),n.d(d,"invert",(function(){return ki})),n.d(d,"conjugate",(function(){return qi})),n.d(d,"length",(function(){return Gi})),n.d(d,"len",(function(){return Xi})),n.d(d,"squaredLength",(function(){return ji})),n.d(d,"sqrLen",(function(){return Hi})),n.d(d,"normalize",(function(){return Yi})),n.d(d,"str",(function(){return Wi})),n.d(d,"exactEquals",(function(){return Zi})),n.d(d,"equals",(function(){return Ki}));var f={};n.r(f),n.d(f,"create",(function(){return Qi})),n.d(f,"clone",(function(){return $i})),n.d(f,"fromValues",(function(){return Ji})),n.d(f,"copy",(function(){return ta})),n.d(f,"set",(function(){return ea})),n.d(f,"add",(function(){return na})),n.d(f,"subtract",(function(){return ra})),n.d(f,"multiply",(function(){return ia})),n.d(f,"divide",(function(){return aa})),n.d(f,"ceil",(function(){return oa})),n.d(f,"floor",(function(){return ua})),n.d(f,"min",(function(){return sa})),n.d(f,"max",(function(){return ca})),n.d(f,"round",(function(){return la})),n.d(f,"scale",(function(){return da})),n.d(f,"scaleAndAdd",(function(){return fa})),n.d(f,"distance",(function(){return ha})),n.d(f,"squaredDistance",(function(){return ma})),n.d(f,"length",(function(){return ga})),n.d(f,"squaredLength",(function(){return va})),n.d(f,"negate",(function(){return pa})),n.d(f,"inverse",(function(){return ya})),n.d(f,"normalize",(function(){return ba})),n.d(f,"dot",(function(){return Ta})),n.d(f,"cross",(function(){return xa})),n.d(f,"lerp",(function(){return Ma})),n.d(f,"random",(function(){return Ea})),n.d(f,"transformMat2",(function(){return wa})),n.d(f,"transformMat2d",(function(){return Sa})),n.d(f,"transformMat3",(function(){return La})),n.d(f,"transformMat4",(function(){return Ia})),n.d(f,"rotate",(function(){return Ra})),n.d(f,"angle",(function(){return Aa})),n.d(f,"zero",(function(){return Ba})),n.d(f,"str",(function(){return Pa})),n.d(f,"exactEquals",(function(){return Da})),n.d(f,"equals",(function(){return _a})),n.d(f,"len",(function(){return Ua})),n.d(f,"sub",(function(){return Ca})),n.d(f,"mul",(function(){return Fa})),n.d(f,"div",(function(){return za})),n.d(f,"dist",(function(){return Oa})),n.d(f,"sqrDist",(function(){return Va})),n.d(f,"sqrLen",(function(){return Na})),n.d(f,"forEach",(function(){return ka}));var h=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,g=Math.random;function v(t){m=t}var p=Math.PI/180;function y(t){return t*p}function b(t,e){return Math.abs(t-e)<=h*Math.max(1,Math.abs(t),Math.abs(e))}function T(){var t=new m(4);return m!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t}function x(t){var e=new m(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function M(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function E(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function w(t,e,n,r){var i=new m(4);return i[0]=t,i[1]=e,i[2]=n,i[3]=r,i}function S(t,e,n,r,i){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t}function L(t,e){if(t===e){var n=e[1];t[1]=e[2],t[2]=n}else t[0]=e[0],t[1]=e[2],t[2]=e[1],t[3]=e[3];return t}function I(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n*a-i*r;return o?(o=1/o,t[0]=a*o,t[1]=-r*o,t[2]=-i*o,t[3]=n*o,t):null}function R(t,e){var n=e[0];return t[0]=e[3],t[1]=-e[1],t[2]=-e[2],t[3]=n,t}function A(t){return t[0]*t[3]-t[2]*t[1]}function B(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=n[0],s=n[1],c=n[2],l=n[3];return t[0]=r*u+a*s,t[1]=i*u+o*s,t[2]=r*c+a*l,t[3]=i*c+o*l,t}function P(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=Math.sin(n),s=Math.cos(n);return t[0]=r*s+a*u,t[1]=i*s+o*u,t[2]=r*-u+a*s,t[3]=i*-u+o*s,t}function D(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=n[0],s=n[1];return t[0]=r*u,t[1]=i*u,t[2]=a*s,t[3]=o*s,t}function _(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=-n,t[3]=r,t}function U(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t}function C(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function F(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))}function z(t,e,n,r){return t[2]=r[2]/r[0],n[0]=r[0],n[1]=r[1],n[3]=r[3]-t[2]*n[1],[t,e,n]}function O(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t}function V(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t}function N(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function k(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=e[0],u=e[1],s=e[2],c=e[3];return Math.abs(n-o)<=h*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-u)<=h*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(i-s)<=h*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(a-c)<=h*Math.max(1,Math.abs(a),Math.abs(c))}function q(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t}function G(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t}var X=B,j=V;function H(){var t=new m(6);return m!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t}function Y(t){var e=new m(6);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e}function W(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function Z(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function K(t,e,n,r,i,a){var o=new m(6);return o[0]=t,o[1]=e,o[2]=n,o[3]=r,o[4]=i,o[5]=a,o}function Q(t,e,n,r,i,a,o){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t}function $(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=n*a-r*i;return s?(s=1/s,t[0]=a*s,t[1]=-r*s,t[2]=-i*s,t[3]=n*s,t[4]=(i*u-a*o)*s,t[5]=(r*o-n*u)*s,t):null}function J(t){return t[0]*t[3]-t[1]*t[2]}function tt(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=n[0],l=n[1],d=n[2],f=n[3],h=n[4],m=n[5];return t[0]=r*c+a*l,t[1]=i*c+o*l,t[2]=r*d+a*f,t[3]=i*d+o*f,t[4]=r*h+a*m+u,t[5]=i*h+o*m+s,t}function et(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=Math.sin(n),l=Math.cos(n);return t[0]=r*l+a*c,t[1]=i*l+o*c,t[2]=r*-c+a*l,t[3]=i*-c+o*l,t[4]=u,t[5]=s,t}function nt(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=n[0],l=n[1];return t[0]=r*c,t[1]=i*c,t[2]=a*l,t[3]=o*l,t[4]=u,t[5]=s,t}function rt(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=n[0],l=n[1];return t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=r*c+a*l+u,t[5]=i*c+o*l+s,t}function it(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=-n,t[3]=r,t[4]=0,t[5]=0,t}function at(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=e[1],t[4]=0,t[5]=0,t}function ot(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=e[0],t[5]=e[1],t}function ut(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function st(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)}function ct(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t}function lt(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t}function dt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t}function ft(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t}function ht(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]}function mt(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=t[4],u=t[5],s=e[0],c=e[1],l=e[2],d=e[3],f=e[4],m=e[5];return Math.abs(n-s)<=h*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(r-c)<=h*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(i-l)<=h*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(a-d)<=h*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(o-f)<=h*Math.max(1,Math.abs(o),Math.abs(f))&&Math.abs(u-m)<=h*Math.max(1,Math.abs(u),Math.abs(m))}var gt=tt,vt=lt;function pt(){var t=new m(9);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function yt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[4],t[4]=e[5],t[5]=e[6],t[6]=e[8],t[7]=e[9],t[8]=e[10],t}function bt(t){var e=new m(9);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function Tt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function xt(t,e,n,r,i,a,o,u,s){var c=new m(9);return c[0]=t,c[1]=e,c[2]=n,c[3]=r,c[4]=i,c[5]=a,c[6]=o,c[7]=u,c[8]=s,c}function Mt(t,e,n,r,i,a,o,u,s,c){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t[6]=u,t[7]=s,t[8]=c,t}function Et(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function wt(t,e){if(t===e){var n=e[1],r=e[2],i=e[5];t[1]=e[3],t[2]=e[6],t[3]=n,t[5]=e[7],t[6]=r,t[7]=i}else t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8];return t}function St(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],c=e[7],l=e[8],d=l*o-u*c,f=-l*a+u*s,h=c*a-o*s,m=n*d+r*f+i*h;return m?(m=1/m,t[0]=d*m,t[1]=(-l*r+i*c)*m,t[2]=(u*r-i*o)*m,t[3]=f*m,t[4]=(l*n-i*s)*m,t[5]=(-u*n+i*a)*m,t[6]=h*m,t[7]=(-c*n+r*s)*m,t[8]=(o*n-r*a)*m,t):null}function Lt(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],c=e[7],l=e[8];return t[0]=o*l-u*c,t[1]=i*c-r*l,t[2]=r*u-i*o,t[3]=u*s-a*l,t[4]=n*l-i*s,t[5]=i*a-n*u,t[6]=a*c-o*s,t[7]=r*s-n*c,t[8]=n*o-r*a,t}function It(t){var e=t[0],n=t[1],r=t[2],i=t[3],a=t[4],o=t[5],u=t[6],s=t[7],c=t[8];return e*(c*a-o*s)+n*(-c*i+o*u)+r*(s*i-a*u)}function Rt(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=e[8],f=n[0],h=n[1],m=n[2],g=n[3],v=n[4],p=n[5],y=n[6],b=n[7],T=n[8];return t[0]=f*r+h*o+m*c,t[1]=f*i+h*u+m*l,t[2]=f*a+h*s+m*d,t[3]=g*r+v*o+p*c,t[4]=g*i+v*u+p*l,t[5]=g*a+v*s+p*d,t[6]=y*r+b*o+T*c,t[7]=y*i+b*u+T*l,t[8]=y*a+b*s+T*d,t}function At(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=e[8],f=n[0],h=n[1];return t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=u,t[5]=s,t[6]=f*r+h*o+c,t[7]=f*i+h*u+l,t[8]=f*a+h*s+d,t}function Bt(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=e[8],f=Math.sin(n),h=Math.cos(n);return t[0]=h*r+f*o,t[1]=h*i+f*u,t[2]=h*a+f*s,t[3]=h*o-f*r,t[4]=h*u-f*i,t[5]=h*s-f*a,t[6]=c,t[7]=l,t[8]=d,t}function Pt(t,e,n){var r=n[0],i=n[1];return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=i*e[3],t[4]=i*e[4],t[5]=i*e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t}function Dt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=e[0],t[7]=e[1],t[8]=1,t}function _t(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=-n,t[4]=r,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Ut(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=e[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Ct(t,e){return t[0]=e[0],t[1]=e[1],t[2]=0,t[3]=e[2],t[4]=e[3],t[5]=0,t[6]=e[4],t[7]=e[5],t[8]=1,t}function Ft(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n+n,u=r+r,s=i+i,c=n*o,l=r*o,d=r*u,f=i*o,h=i*u,m=i*s,g=a*o,v=a*u,p=a*s;return t[0]=1-d-m,t[3]=l-p,t[6]=f+v,t[1]=l+p,t[4]=1-c-m,t[7]=h-g,t[2]=f-v,t[5]=h+g,t[8]=1-c-d,t}function zt(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],c=e[7],l=e[8],d=e[9],f=e[10],h=e[11],m=e[12],g=e[13],v=e[14],p=e[15],y=n*u-r*o,b=n*s-i*o,T=n*c-a*o,x=r*s-i*u,M=r*c-a*u,E=i*c-a*s,w=l*g-d*m,S=l*v-f*m,L=l*p-h*m,I=d*v-f*g,R=d*p-h*g,A=f*p-h*v,B=y*A-b*R+T*I+x*L-M*S+E*w;return B?(B=1/B,t[0]=(u*A-s*R+c*I)*B,t[1]=(s*L-o*A-c*S)*B,t[2]=(o*R-u*L+c*w)*B,t[3]=(i*R-r*A-a*I)*B,t[4]=(n*A-i*L+a*S)*B,t[5]=(r*L-n*R-a*w)*B,t[6]=(g*E-v*M+p*x)*B,t[7]=(v*T-m*E-p*b)*B,t[8]=(m*M-g*T+p*y)*B,t):null}function Ot(t,e,n){return t[0]=2/e,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/n,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function Vt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function Nt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))}function kt(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t}function qt(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t}function Gt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t}function Xt(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t}function jt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]}function Ht(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=t[4],u=t[5],s=t[6],c=t[7],l=t[8],d=e[0],f=e[1],m=e[2],g=e[3],v=e[4],p=e[5],y=e[6],b=e[7],T=e[8];return Math.abs(n-d)<=h*Math.max(1,Math.abs(n),Math.abs(d))&&Math.abs(r-f)<=h*Math.max(1,Math.abs(r),Math.abs(f))&&Math.abs(i-m)<=h*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(a-g)<=h*Math.max(1,Math.abs(a),Math.abs(g))&&Math.abs(o-v)<=h*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(u-p)<=h*Math.max(1,Math.abs(u),Math.abs(p))&&Math.abs(s-y)<=h*Math.max(1,Math.abs(s),Math.abs(y))&&Math.abs(c-b)<=h*Math.max(1,Math.abs(c),Math.abs(b))&&Math.abs(l-T)<=h*Math.max(1,Math.abs(l),Math.abs(T))}var Yt=Rt,Wt=qt;function Zt(){var t=new m(16);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function Kt(t){var e=new m(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function Qt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function $t(t,e,n,r,i,a,o,u,s,c,l,d,f,h,g,v){var p=new m(16);return p[0]=t,p[1]=e,p[2]=n,p[3]=r,p[4]=i,p[5]=a,p[6]=o,p[7]=u,p[8]=s,p[9]=c,p[10]=l,p[11]=d,p[12]=f,p[13]=h,p[14]=g,p[15]=v,p}function Jt(t,e,n,r,i,a,o,u,s,c,l,d,f,h,m,g,v){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t[6]=u,t[7]=s,t[8]=c,t[9]=l,t[10]=d,t[11]=f,t[12]=h,t[13]=m,t[14]=g,t[15]=v,t}function te(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ee(t,e){if(t===e){var n=e[1],r=e[2],i=e[3],a=e[6],o=e[7],u=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=a,t[11]=e[14],t[12]=i,t[13]=o,t[14]=u}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function ne(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],c=e[7],l=e[8],d=e[9],f=e[10],h=e[11],m=e[12],g=e[13],v=e[14],p=e[15],y=n*u-r*o,b=n*s-i*o,T=n*c-a*o,x=r*s-i*u,M=r*c-a*u,E=i*c-a*s,w=l*g-d*m,S=l*v-f*m,L=l*p-h*m,I=d*v-f*g,R=d*p-h*g,A=f*p-h*v,B=y*A-b*R+T*I+x*L-M*S+E*w;return B?(B=1/B,t[0]=(u*A-s*R+c*I)*B,t[1]=(i*R-r*A-a*I)*B,t[2]=(g*E-v*M+p*x)*B,t[3]=(f*M-d*E-h*x)*B,t[4]=(s*L-o*A-c*S)*B,t[5]=(n*A-i*L+a*S)*B,t[6]=(v*T-m*E-p*b)*B,t[7]=(l*E-f*T+h*b)*B,t[8]=(o*R-u*L+c*w)*B,t[9]=(r*L-n*R-a*w)*B,t[10]=(m*M-g*T+p*y)*B,t[11]=(d*T-l*M-h*y)*B,t[12]=(u*S-o*I-s*w)*B,t[13]=(n*I-r*S+i*w)*B,t[14]=(g*b-m*x-v*y)*B,t[15]=(l*x-d*b+f*y)*B,t):null}function re(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],s=e[6],c=e[7],l=e[8],d=e[9],f=e[10],h=e[11],m=e[12],g=e[13],v=e[14],p=e[15];return t[0]=u*(f*p-h*v)-d*(s*p-c*v)+g*(s*h-c*f),t[1]=-(r*(f*p-h*v)-d*(i*p-a*v)+g*(i*h-a*f)),t[2]=r*(s*p-c*v)-u*(i*p-a*v)+g*(i*c-a*s),t[3]=-(r*(s*h-c*f)-u*(i*h-a*f)+d*(i*c-a*s)),t[4]=-(o*(f*p-h*v)-l*(s*p-c*v)+m*(s*h-c*f)),t[5]=n*(f*p-h*v)-l*(i*p-a*v)+m*(i*h-a*f),t[6]=-(n*(s*p-c*v)-o*(i*p-a*v)+m*(i*c-a*s)),t[7]=n*(s*h-c*f)-o*(i*h-a*f)+l*(i*c-a*s),t[8]=o*(d*p-h*g)-l*(u*p-c*g)+m*(u*h-c*d),t[9]=-(n*(d*p-h*g)-l*(r*p-a*g)+m*(r*h-a*d)),t[10]=n*(u*p-c*g)-o*(r*p-a*g)+m*(r*c-a*u),t[11]=-(n*(u*h-c*d)-o*(r*h-a*d)+l*(r*c-a*u)),t[12]=-(o*(d*v-f*g)-l*(u*v-s*g)+m*(u*f-s*d)),t[13]=n*(d*v-f*g)-l*(r*v-i*g)+m*(r*f-i*d),t[14]=-(n*(u*v-s*g)-o*(r*v-i*g)+m*(r*s-i*u)),t[15]=n*(u*f-s*d)-o*(r*f-i*d)+l*(r*s-i*u),t}function ie(t){var e=t[0],n=t[1],r=t[2],i=t[3],a=t[4],o=t[5],u=t[6],s=t[7],c=t[8],l=t[9],d=t[10],f=t[11],h=t[12],m=t[13],g=t[14],v=t[15];return(e*o-n*a)*(d*v-f*g)-(e*u-r*a)*(l*v-f*m)+(e*s-i*a)*(l*g-d*m)+(n*u-r*o)*(c*v-f*h)-(n*s-i*o)*(c*g-d*h)+(r*s-i*u)*(c*m-l*h)}function ae(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=e[8],f=e[9],h=e[10],m=e[11],g=e[12],v=e[13],p=e[14],y=e[15],b=n[0],T=n[1],x=n[2],M=n[3];return t[0]=b*r+T*u+x*d+M*g,t[1]=b*i+T*s+x*f+M*v,t[2]=b*a+T*c+x*h+M*p,t[3]=b*o+T*l+x*m+M*y,b=n[4],T=n[5],x=n[6],M=n[7],t[4]=b*r+T*u+x*d+M*g,t[5]=b*i+T*s+x*f+M*v,t[6]=b*a+T*c+x*h+M*p,t[7]=b*o+T*l+x*m+M*y,b=n[8],T=n[9],x=n[10],M=n[11],t[8]=b*r+T*u+x*d+M*g,t[9]=b*i+T*s+x*f+M*v,t[10]=b*a+T*c+x*h+M*p,t[11]=b*o+T*l+x*m+M*y,b=n[12],T=n[13],x=n[14],M=n[15],t[12]=b*r+T*u+x*d+M*g,t[13]=b*i+T*s+x*f+M*v,t[14]=b*a+T*c+x*h+M*p,t[15]=b*o+T*l+x*m+M*y,t}function oe(t,e,n){var r,i,a,o,u,s,c,l,d,f,h,m,g=n[0],v=n[1],p=n[2];return e===t?(t[12]=e[0]*g+e[4]*v+e[8]*p+e[12],t[13]=e[1]*g+e[5]*v+e[9]*p+e[13],t[14]=e[2]*g+e[6]*v+e[10]*p+e[14],t[15]=e[3]*g+e[7]*v+e[11]*p+e[15]):(r=e[0],i=e[1],a=e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=e[8],f=e[9],h=e[10],m=e[11],t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=u,t[5]=s,t[6]=c,t[7]=l,t[8]=d,t[9]=f,t[10]=h,t[11]=m,t[12]=r*g+u*v+d*p+e[12],t[13]=i*g+s*v+f*p+e[13],t[14]=a*g+c*v+h*p+e[14],t[15]=o*g+l*v+m*p+e[15]),t}function ue(t,e,n){var r=n[0],i=n[1],a=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function se(t,e,n,r){var i,a,o,u,s,c,l,d,f,m,g,v,p,y,b,T,x,M,E,w,S,L,I,R,A=r[0],B=r[1],P=r[2],D=Math.sqrt(A*A+B*B+P*P);return D<h?null:(A*=D=1/D,B*=D,P*=D,i=Math.sin(n),o=1-(a=Math.cos(n)),u=e[0],s=e[1],c=e[2],l=e[3],d=e[4],f=e[5],m=e[6],g=e[7],v=e[8],p=e[9],y=e[10],b=e[11],T=A*A*o+a,x=B*A*o+P*i,M=P*A*o-B*i,E=A*B*o-P*i,w=B*B*o+a,S=P*B*o+A*i,L=A*P*o+B*i,I=B*P*o-A*i,R=P*P*o+a,t[0]=u*T+d*x+v*M,t[1]=s*T+f*x+p*M,t[2]=c*T+m*x+y*M,t[3]=l*T+g*x+b*M,t[4]=u*E+d*w+v*S,t[5]=s*E+f*w+p*S,t[6]=c*E+m*w+y*S,t[7]=l*E+g*w+b*S,t[8]=u*L+d*I+v*R,t[9]=s*L+f*I+p*R,t[10]=c*L+m*I+y*R,t[11]=l*L+g*I+b*R,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function ce(t,e,n){var r=Math.sin(n),i=Math.cos(n),a=e[4],o=e[5],u=e[6],s=e[7],c=e[8],l=e[9],d=e[10],f=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*i+c*r,t[5]=o*i+l*r,t[6]=u*i+d*r,t[7]=s*i+f*r,t[8]=c*i-a*r,t[9]=l*i-o*r,t[10]=d*i-u*r,t[11]=f*i-s*r,t}function le(t,e,n){var r=Math.sin(n),i=Math.cos(n),a=e[0],o=e[1],u=e[2],s=e[3],c=e[8],l=e[9],d=e[10],f=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*i-c*r,t[1]=o*i-l*r,t[2]=u*i-d*r,t[3]=s*i-f*r,t[8]=a*r+c*i,t[9]=o*r+l*i,t[10]=u*r+d*i,t[11]=s*r+f*i,t}function de(t,e,n){var r=Math.sin(n),i=Math.cos(n),a=e[0],o=e[1],u=e[2],s=e[3],c=e[4],l=e[5],d=e[6],f=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*i+c*r,t[1]=o*i+l*r,t[2]=u*i+d*r,t[3]=s*i+f*r,t[4]=c*i-a*r,t[5]=l*i-o*r,t[6]=d*i-u*r,t[7]=f*i-s*r,t}function fe(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function he(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function me(t,e,n){var r,i,a,o=n[0],u=n[1],s=n[2],c=Math.sqrt(o*o+u*u+s*s);return c<h?null:(o*=c=1/c,u*=c,s*=c,r=Math.sin(e),a=1-(i=Math.cos(e)),t[0]=o*o*a+i,t[1]=u*o*a+s*r,t[2]=s*o*a-u*r,t[3]=0,t[4]=o*u*a-s*r,t[5]=u*u*a+i,t[6]=s*u*a+o*r,t[7]=0,t[8]=o*s*a+u*r,t[9]=u*s*a-o*r,t[10]=s*s*a+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function ge(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ve(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function pe(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function ye(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=r+r,s=i+i,c=a+a,l=r*u,d=r*s,f=r*c,h=i*s,m=i*c,g=a*c,v=o*u,p=o*s,y=o*c;return t[0]=1-(h+g),t[1]=d+y,t[2]=f-p,t[3]=0,t[4]=d-y,t[5]=1-(l+g),t[6]=m+v,t[7]=0,t[8]=f+p,t[9]=m-v,t[10]=1-(l+h),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function be(t,e){var n=new m(3),r=-e[0],i=-e[1],a=-e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=r*r+i*i+a*a+o*o;return d>0?(n[0]=2*(u*o+l*r+s*a-c*i)/d,n[1]=2*(s*o+l*i+c*r-u*a)/d,n[2]=2*(c*o+l*a+u*i-s*r)/d):(n[0]=2*(u*o+l*r+s*a-c*i),n[1]=2*(s*o+l*i+c*r-u*a),n[2]=2*(c*o+l*a+u*i-s*r)),ye(t,e,n),t}function Te(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function xe(t,e){var n=e[0],r=e[1],i=e[2],a=e[4],o=e[5],u=e[6],s=e[8],c=e[9],l=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(a*a+o*o+u*u),t[2]=Math.sqrt(s*s+c*c+l*l),t}function Me(t,e){var n=e[0]+e[5]+e[10],r=0;return n>0?(r=2*Math.sqrt(n+1),t[3]=.25*r,t[0]=(e[6]-e[9])/r,t[1]=(e[8]-e[2])/r,t[2]=(e[1]-e[4])/r):e[0]>e[5]&&e[0]>e[10]?(r=2*Math.sqrt(1+e[0]-e[5]-e[10]),t[3]=(e[6]-e[9])/r,t[0]=.25*r,t[1]=(e[1]+e[4])/r,t[2]=(e[8]+e[2])/r):e[5]>e[10]?(r=2*Math.sqrt(1+e[5]-e[0]-e[10]),t[3]=(e[8]-e[2])/r,t[0]=(e[1]+e[4])/r,t[1]=.25*r,t[2]=(e[6]+e[9])/r):(r=2*Math.sqrt(1+e[10]-e[0]-e[5]),t[3]=(e[1]-e[4])/r,t[0]=(e[8]+e[2])/r,t[1]=(e[6]+e[9])/r,t[2]=.25*r),t}function Ee(t,e,n,r){var i=e[0],a=e[1],o=e[2],u=e[3],s=i+i,c=a+a,l=o+o,d=i*s,f=i*c,h=i*l,m=a*c,g=a*l,v=o*l,p=u*s,y=u*c,b=u*l,T=r[0],x=r[1],M=r[2];return t[0]=(1-(m+v))*T,t[1]=(f+b)*T,t[2]=(h-y)*T,t[3]=0,t[4]=(f-b)*x,t[5]=(1-(d+v))*x,t[6]=(g+p)*x,t[7]=0,t[8]=(h+y)*M,t[9]=(g-p)*M,t[10]=(1-(d+m))*M,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function we(t,e,n,r,i){var a=e[0],o=e[1],u=e[2],s=e[3],c=a+a,l=o+o,d=u+u,f=a*c,h=a*l,m=a*d,g=o*l,v=o*d,p=u*d,y=s*c,b=s*l,T=s*d,x=r[0],M=r[1],E=r[2],w=i[0],S=i[1],L=i[2],I=(1-(g+p))*x,R=(h+T)*x,A=(m-b)*x,B=(h-T)*M,P=(1-(f+p))*M,D=(v+y)*M,_=(m+b)*E,U=(v-y)*E,C=(1-(f+g))*E;return t[0]=I,t[1]=R,t[2]=A,t[3]=0,t[4]=B,t[5]=P,t[6]=D,t[7]=0,t[8]=_,t[9]=U,t[10]=C,t[11]=0,t[12]=n[0]+w-(I*w+B*S+_*L),t[13]=n[1]+S-(R*w+P*S+U*L),t[14]=n[2]+L-(A*w+D*S+C*L),t[15]=1,t}function Se(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n+n,u=r+r,s=i+i,c=n*o,l=r*o,d=r*u,f=i*o,h=i*u,m=i*s,g=a*o,v=a*u,p=a*s;return t[0]=1-d-m,t[1]=l+p,t[2]=f-v,t[3]=0,t[4]=l-p,t[5]=1-c-m,t[6]=h+g,t[7]=0,t[8]=f+v,t[9]=h-g,t[10]=1-c-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Le(t,e,n,r,i,a,o){var u=1/(n-e),s=1/(i-r),c=1/(a-o);return t[0]=2*a*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*s,t[6]=0,t[7]=0,t[8]=(n+e)*u,t[9]=(i+r)*s,t[10]=(o+a)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*a*2*c,t[15]=0,t}function Ie(t,e,n,r,i){var a,o=1/Math.tan(e/2);return t[0]=o/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(a=1/(r-i),t[10]=(i+r)*a,t[14]=2*i*r*a):(t[10]=-1,t[14]=-2*r),t}function Re(t,e,n,r){var i=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),o=Math.tan(e.leftDegrees*Math.PI/180),u=Math.tan(e.rightDegrees*Math.PI/180),s=2/(o+u),c=2/(i+a);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(o-u)*s*.5,t[9]=(i-a)*c*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function Ae(t,e,n,r,i,a,o){var u=1/(e-n),s=1/(r-i),c=1/(a-o);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+n)*u,t[13]=(i+r)*s,t[14]=(o+a)*c,t[15]=1,t}function Be(t,e,n,r){var i,a,o,u,s,c,l,d,f,m,g=e[0],v=e[1],p=e[2],y=r[0],b=r[1],T=r[2],x=n[0],M=n[1],E=n[2];return Math.abs(g-x)<h&&Math.abs(v-M)<h&&Math.abs(p-E)<h?te(t):(l=g-x,d=v-M,f=p-E,i=b*(f*=m=1/Math.sqrt(l*l+d*d+f*f))-T*(d*=m),a=T*(l*=m)-y*f,o=y*d-b*l,(m=Math.sqrt(i*i+a*a+o*o))?(i*=m=1/m,a*=m,o*=m):(i=0,a=0,o=0),u=d*o-f*a,s=f*i-l*o,c=l*a-d*i,(m=Math.sqrt(u*u+s*s+c*c))?(u*=m=1/m,s*=m,c*=m):(u=0,s=0,c=0),t[0]=i,t[1]=u,t[2]=l,t[3]=0,t[4]=a,t[5]=s,t[6]=d,t[7]=0,t[8]=o,t[9]=c,t[10]=f,t[11]=0,t[12]=-(i*g+a*v+o*p),t[13]=-(u*g+s*v+c*p),t[14]=-(l*g+d*v+f*p),t[15]=1,t)}function Pe(t,e,n,r){var i=e[0],a=e[1],o=e[2],u=r[0],s=r[1],c=r[2],l=i-n[0],d=a-n[1],f=o-n[2],h=l*l+d*d+f*f;h>0&&(l*=h=1/Math.sqrt(h),d*=h,f*=h);var m=s*f-c*d,g=c*l-u*f,v=u*d-s*l;return(h=m*m+g*g+v*v)>0&&(m*=h=1/Math.sqrt(h),g*=h,v*=h),t[0]=m,t[1]=g,t[2]=v,t[3]=0,t[4]=d*v-f*g,t[5]=f*m-l*v,t[6]=l*g-d*m,t[7]=0,t[8]=l,t[9]=d,t[10]=f,t[11]=0,t[12]=i,t[13]=a,t[14]=o,t[15]=1,t}function De(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function _e(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function Ue(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function Ce(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function Fe(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function ze(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function Oe(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function Ve(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=t[4],u=t[5],s=t[6],c=t[7],l=t[8],d=t[9],f=t[10],m=t[11],g=t[12],v=t[13],p=t[14],y=t[15],b=e[0],T=e[1],x=e[2],M=e[3],E=e[4],w=e[5],S=e[6],L=e[7],I=e[8],R=e[9],A=e[10],B=e[11],P=e[12],D=e[13],_=e[14],U=e[15];return Math.abs(n-b)<=h*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-T)<=h*Math.max(1,Math.abs(r),Math.abs(T))&&Math.abs(i-x)<=h*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(a-M)<=h*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(o-E)<=h*Math.max(1,Math.abs(o),Math.abs(E))&&Math.abs(u-w)<=h*Math.max(1,Math.abs(u),Math.abs(w))&&Math.abs(s-S)<=h*Math.max(1,Math.abs(s),Math.abs(S))&&Math.abs(c-L)<=h*Math.max(1,Math.abs(c),Math.abs(L))&&Math.abs(l-I)<=h*Math.max(1,Math.abs(l),Math.abs(I))&&Math.abs(d-R)<=h*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(f-A)<=h*Math.max(1,Math.abs(f),Math.abs(A))&&Math.abs(m-B)<=h*Math.max(1,Math.abs(m),Math.abs(B))&&Math.abs(g-P)<=h*Math.max(1,Math.abs(g),Math.abs(P))&&Math.abs(v-D)<=h*Math.max(1,Math.abs(v),Math.abs(D))&&Math.abs(p-_)<=h*Math.max(1,Math.abs(p),Math.abs(_))&&Math.abs(y-U)<=h*Math.max(1,Math.abs(y),Math.abs(U))}var Ne=ae,ke=Ce;function qe(){var t=new m(3);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Ge(t){var e=new m(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Xe(t){var e=t[0],n=t[1],r=t[2];return Math.sqrt(e*e+n*n+r*r)}function je(t,e,n){var r=new m(3);return r[0]=t,r[1]=e,r[2]=n,r}function He(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Ye(t,e,n,r){return t[0]=e,t[1]=n,t[2]=r,t}function We(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function Ze(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function Ke(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function Qe(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function $e(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function Je(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function tn(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function en(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function nn(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function rn(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function an(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t}function on(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(n*n+r*r+i*i)}function un(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}function sn(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}function cn(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function ln(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function dn(t,e){var n=e[0],r=e[1],i=e[2],a=n*n+r*r+i*i;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t[2]=e[2]*a,t}function fn(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function hn(t,e,n){var r=e[0],i=e[1],a=e[2],o=n[0],u=n[1],s=n[2];return t[0]=i*s-a*u,t[1]=a*o-r*s,t[2]=r*u-i*o,t}function mn(t,e,n,r){var i=e[0],a=e[1],o=e[2];return t[0]=i+r*(n[0]-i),t[1]=a+r*(n[1]-a),t[2]=o+r*(n[2]-o),t}function gn(t,e,n,r,i,a){var o=a*a,u=o*(2*a-3)+1,s=o*(a-2)+a,c=o*(a-1),l=o*(3-2*a);return t[0]=e[0]*u+n[0]*s+r[0]*c+i[0]*l,t[1]=e[1]*u+n[1]*s+r[1]*c+i[1]*l,t[2]=e[2]*u+n[2]*s+r[2]*c+i[2]*l,t}function vn(t,e,n,r,i,a){var o=1-a,u=o*o,s=a*a,c=u*o,l=3*a*u,d=3*s*o,f=s*a;return t[0]=e[0]*c+n[0]*l+r[0]*d+i[0]*f,t[1]=e[1]*c+n[1]*l+r[1]*d+i[1]*f,t[2]=e[2]*c+n[2]*l+r[2]*d+i[2]*f,t}function pn(t,e){e=e||1;var n=2*g()*Math.PI,r=2*g()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t}function yn(t,e,n){var r=e[0],i=e[1],a=e[2],o=n[3]*r+n[7]*i+n[11]*a+n[15];return o=o||1,t[0]=(n[0]*r+n[4]*i+n[8]*a+n[12])/o,t[1]=(n[1]*r+n[5]*i+n[9]*a+n[13])/o,t[2]=(n[2]*r+n[6]*i+n[10]*a+n[14])/o,t}function bn(t,e,n){var r=e[0],i=e[1],a=e[2];return t[0]=r*n[0]+i*n[3]+a*n[6],t[1]=r*n[1]+i*n[4]+a*n[7],t[2]=r*n[2]+i*n[5]+a*n[8],t}function Tn(t,e,n){var r=n[0],i=n[1],a=n[2],o=n[3],u=e[0],s=e[1],c=e[2],l=i*c-a*s,d=a*u-r*c,f=r*s-i*u,h=i*f-a*d,m=a*l-r*f,g=r*d-i*l,v=2*o;return l*=v,d*=v,f*=v,h*=2,m*=2,g*=2,t[0]=u+l+h,t[1]=s+d+m,t[2]=c+f+g,t}function xn(t,e,n,r){var i=[],a=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],a[0]=i[0],a[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),a[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function Mn(t,e,n,r){var i=[],a=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],a[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),a[1]=i[1],a[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function En(t,e,n,r){var i=[],a=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],a[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),a[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),a[2]=i[2],t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function wn(t,e){var n=je(t[0],t[1],t[2]),r=je(e[0],e[1],e[2]);dn(n,n),dn(r,r);var i=fn(n,r);return i>1?0:i<-1?Math.PI:Math.acos(i)}function Sn(t){return t[0]=0,t[1]=0,t[2]=0,t}function Ln(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function In(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function Rn(t,e){var n=t[0],r=t[1],i=t[2],a=e[0],o=e[1],u=e[2];return Math.abs(n-a)<=h*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-o)<=h*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(i-u)<=h*Math.max(1,Math.abs(i),Math.abs(u))}var An,Bn=Ze,Pn=Ke,Dn=Qe,_n=on,Un=un,Cn=Xe,Fn=sn,zn=(An=qe(),function(t,e,n,r,i,a){var o,u;for(e||(e=3),n||(n=0),u=r?Math.min(r*e+n,t.length):t.length,o=n;o<u;o+=e)An[0]=t[o],An[1]=t[o+1],An[2]=t[o+2],i(An,An,a),t[o]=An[0],t[o+1]=An[1],t[o+2]=An[2];return t});function On(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function Vn(t){var e=new m(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function Nn(t,e,n,r){var i=new m(4);return i[0]=t,i[1]=e,i[2]=n,i[3]=r,i}function kn(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}function qn(t,e,n,r,i){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t}function Gn(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t}function Xn(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t}function jn(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t[3]=e[3]*n[3],t}function Hn(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t[3]=e[3]/n[3],t}function Yn(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t[3]=Math.ceil(e[3]),t}function Wn(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t[3]=Math.floor(e[3]),t}function Zn(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t[3]=Math.min(e[3],n[3]),t}function Kn(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t[3]=Math.max(e[3],n[3]),t}function Qn(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t[3]=Math.round(e[3]),t}function $n(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t}function Jn(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t}function tr(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2],a=e[3]-t[3];return Math.sqrt(n*n+r*r+i*i+a*a)}function er(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2],a=e[3]-t[3];return n*n+r*r+i*i+a*a}function nr(t){var e=t[0],n=t[1],r=t[2],i=t[3];return Math.sqrt(e*e+n*n+r*r+i*i)}function rr(t){var e=t[0],n=t[1],r=t[2],i=t[3];return e*e+n*n+r*r+i*i}function ir(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t}function ar(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t[3]=1/e[3],t}function or(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n*n+r*r+i*i+a*a;return o>0&&(o=1/Math.sqrt(o)),t[0]=n*o,t[1]=r*o,t[2]=i*o,t[3]=a*o,t}function ur(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]}function sr(t,e,n,r){var i=n[0]*r[1]-n[1]*r[0],a=n[0]*r[2]-n[2]*r[0],o=n[0]*r[3]-n[3]*r[0],u=n[1]*r[2]-n[2]*r[1],s=n[1]*r[3]-n[3]*r[1],c=n[2]*r[3]-n[3]*r[2],l=e[0],d=e[1],f=e[2],h=e[3];return t[0]=d*c-f*s+h*u,t[1]=-l*c+f*o-h*a,t[2]=l*s-d*o+h*i,t[3]=-l*u+d*a-f*i,t}function cr(t,e,n,r){var i=e[0],a=e[1],o=e[2],u=e[3];return t[0]=i+r*(n[0]-i),t[1]=a+r*(n[1]-a),t[2]=o+r*(n[2]-o),t[3]=u+r*(n[3]-u),t}function lr(t,e){var n,r,i,a,o,u;e=e||1;do{o=(n=2*g()-1)*n+(r=2*g()-1)*r}while(o>=1);do{u=(i=2*g()-1)*i+(a=2*g()-1)*a}while(u>=1);var s=Math.sqrt((1-o)/u);return t[0]=e*n,t[1]=e*r,t[2]=e*i*s,t[3]=e*a*s,t}function dr(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3];return t[0]=n[0]*r+n[4]*i+n[8]*a+n[12]*o,t[1]=n[1]*r+n[5]*i+n[9]*a+n[13]*o,t[2]=n[2]*r+n[6]*i+n[10]*a+n[14]*o,t[3]=n[3]*r+n[7]*i+n[11]*a+n[15]*o,t}function fr(t,e,n){var r=e[0],i=e[1],a=e[2],o=n[0],u=n[1],s=n[2],c=n[3],l=c*r+u*a-s*i,d=c*i+s*r-o*a,f=c*a+o*i-u*r,h=-o*r-u*i-s*a;return t[0]=l*c+h*-o+d*-s-f*-u,t[1]=d*c+h*-u+f*-o-l*-s,t[2]=f*c+h*-s+l*-u-d*-o,t[3]=e[3],t}function hr(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function mr(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function gr(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]}function vr(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=e[0],u=e[1],s=e[2],c=e[3];return Math.abs(n-o)<=h*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-u)<=h*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(i-s)<=h*Math.max(1,Math.abs(i),Math.abs(s))&&Math.abs(a-c)<=h*Math.max(1,Math.abs(a),Math.abs(c))}var pr=Xn,yr=jn,br=Hn,Tr=tr,xr=er,Mr=nr,Er=rr,wr=function(){var t=On();return function(e,n,r,i,a,o){var u,s;for(n||(n=4),r||(r=0),s=i?Math.min(i*n+r,e.length):e.length,u=r;u<s;u+=n)t[0]=e[u],t[1]=e[u+1],t[2]=e[u+2],t[3]=e[u+3],a(t,t,o),e[u]=t[0],e[u+1]=t[1],e[u+2]=t[2],e[u+3]=t[3];return e}}();function Sr(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Lr(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Ir(t,e,n){n*=.5;var r=Math.sin(n);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(n),t}function Rr(t,e){var n=2*Math.acos(e[3]),r=Math.sin(n/2);return r>h?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),n}function Ar(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=n[0],s=n[1],c=n[2],l=n[3];return t[0]=r*l+o*u+i*c-a*s,t[1]=i*l+o*s+a*u-r*c,t[2]=a*l+o*c+r*s-i*u,t[3]=o*l-r*u-i*s-a*c,t}function Br(t,e,n){n*=.5;var r=e[0],i=e[1],a=e[2],o=e[3],u=Math.sin(n),s=Math.cos(n);return t[0]=r*s+o*u,t[1]=i*s+a*u,t[2]=a*s-i*u,t[3]=o*s-r*u,t}function Pr(t,e,n){n*=.5;var r=e[0],i=e[1],a=e[2],o=e[3],u=Math.sin(n),s=Math.cos(n);return t[0]=r*s-a*u,t[1]=i*s+o*u,t[2]=a*s+r*u,t[3]=o*s-i*u,t}function Dr(t,e,n){n*=.5;var r=e[0],i=e[1],a=e[2],o=e[3],u=Math.sin(n),s=Math.cos(n);return t[0]=r*s+i*u,t[1]=i*s-r*u,t[2]=a*s+o*u,t[3]=o*s-a*u,t}function _r(t,e){var n=e[0],r=e[1],i=e[2];return t[0]=n,t[1]=r,t[2]=i,t[3]=Math.sqrt(Math.abs(1-n*n-r*r-i*i)),t}function Ur(t,e,n,r){var i,a,o,u,s,c=e[0],l=e[1],d=e[2],f=e[3],m=n[0],g=n[1],v=n[2],p=n[3];return(a=c*m+l*g+d*v+f*p)<0&&(a=-a,m=-m,g=-g,v=-v,p=-p),1-a>h?(i=Math.acos(a),o=Math.sin(i),u=Math.sin((1-r)*i)/o,s=Math.sin(r*i)/o):(u=1-r,s=r),t[0]=u*c+s*m,t[1]=u*l+s*g,t[2]=u*d+s*v,t[3]=u*f+s*p,t}function Cr(t){var e=g(),n=g(),r=g(),i=Math.sqrt(1-e),a=Math.sqrt(e);return t[0]=i*Math.sin(2*Math.PI*n),t[1]=i*Math.cos(2*Math.PI*n),t[2]=a*Math.sin(2*Math.PI*r),t[3]=a*Math.cos(2*Math.PI*r),t}function Fr(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n*n+r*r+i*i+a*a,u=o?1/o:0;return t[0]=-n*u,t[1]=-r*u,t[2]=-i*u,t[3]=a*u,t}function zr(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function Or(t,e){var n,r=e[0]+e[4]+e[8];if(r>0)n=Math.sqrt(r+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{var i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);var a=(i+1)%3,o=(i+2)%3;n=Math.sqrt(e[3*i+i]-e[3*a+a]-e[3*o+o]+1),t[i]=.5*n,n=.5/n,t[3]=(e[3*a+o]-e[3*o+a])*n,t[a]=(e[3*a+i]+e[3*i+a])*n,t[o]=(e[3*o+i]+e[3*i+o])*n}return t}function Vr(t,e,n,r){var i=.5*Math.PI/180;e*=i,n*=i,r*=i;var a=Math.sin(e),o=Math.cos(e),u=Math.sin(n),s=Math.cos(n),c=Math.sin(r),l=Math.cos(r);return t[0]=a*s*l-o*u*c,t[1]=o*u*l+a*s*c,t[2]=o*s*c-a*u*l,t[3]=o*s*l+a*u*c,t}function Nr(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var kr,qr,Gr,Xr,jr,Hr,Yr=Vn,Wr=Nn,Zr=kn,Kr=qn,Qr=Gn,$r=Ar,Jr=$n,ti=ur,ei=cr,ni=nr,ri=ni,ii=rr,ai=ii,oi=or,ui=gr,si=vr,ci=(kr=qe(),qr=je(1,0,0),Gr=je(0,1,0),function(t,e,n){var r=fn(e,n);return r<-.999999?(hn(kr,qr,e),Cn(kr)<1e-6&&hn(kr,Gr,e),dn(kr,kr),Ir(t,kr,Math.PI),t):r>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(hn(kr,e,n),t[0]=kr[0],t[1]=kr[1],t[2]=kr[2],t[3]=1+r,oi(t,t))}),li=(Xr=Sr(),jr=Sr(),function(t,e,n,r,i,a){return Ur(Xr,e,i,a),Ur(jr,n,r,a),Ur(t,Xr,jr,2*a*(1-a)),t}),di=(Hr=pt(),function(t,e,n,r){return Hr[0]=n[0],Hr[3]=n[1],Hr[6]=n[2],Hr[1]=r[0],Hr[4]=r[1],Hr[7]=r[2],Hr[2]=-e[0],Hr[5]=-e[1],Hr[8]=-e[2],oi(t,Or(t,Hr))});function fi(){var t=new m(8);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t}function hi(t){var e=new m(8);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e}function mi(t,e,n,r,i,a,o,u){var s=new m(8);return s[0]=t,s[1]=e,s[2]=n,s[3]=r,s[4]=i,s[5]=a,s[6]=o,s[7]=u,s}function gi(t,e,n,r,i,a,o){var u=new m(8);u[0]=t,u[1]=e,u[2]=n,u[3]=r;var s=.5*i,c=.5*a,l=.5*o;return u[4]=s*r+c*n-l*e,u[5]=c*r+l*t-s*n,u[6]=l*r+s*e-c*t,u[7]=-s*t-c*e-l*n,u}function vi(t,e,n){var r=.5*n[0],i=.5*n[1],a=.5*n[2],o=e[0],u=e[1],s=e[2],c=e[3];return t[0]=o,t[1]=u,t[2]=s,t[3]=c,t[4]=r*c+i*s-a*u,t[5]=i*c+a*o-r*s,t[6]=a*c+r*u-i*o,t[7]=-r*o-i*u-a*s,t}function pi(t,e){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*e[0],t[5]=.5*e[1],t[6]=.5*e[2],t[7]=0,t}function yi(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function bi(t,e){var n=Sr();Me(n,e);var r=new m(3);return Te(r,e),vi(t,n,r),t}function Ti(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t}function xi(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function Mi(t,e,n,r,i,a,o,u,s){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t[6]=u,t[7]=s,t}var Ei=Zr;function wi(t,e){return t[0]=e[4],t[1]=e[5],t[2]=e[6],t[3]=e[7],t}var Si=Zr;function Li(t,e){return t[4]=e[0],t[5]=e[1],t[6]=e[2],t[7]=e[3],t}function Ii(t,e){var n=e[4],r=e[5],i=e[6],a=e[7],o=-e[0],u=-e[1],s=-e[2],c=e[3];return t[0]=2*(n*c+a*o+r*s-i*u),t[1]=2*(r*c+a*u+i*o-n*s),t[2]=2*(i*c+a*s+n*u-r*o),t}function Ri(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=.5*n[0],s=.5*n[1],c=.5*n[2],l=e[4],d=e[5],f=e[6],h=e[7];return t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=o*u+i*c-a*s+l,t[5]=o*s+a*u-r*c+d,t[6]=o*c+r*s-i*u+f,t[7]=-r*u-i*s-a*c+h,t}function Ai(t,e,n){var r=-e[0],i=-e[1],a=-e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=u*o+l*r+s*a-c*i,f=s*o+l*i+c*r-u*a,h=c*o+l*a+u*i-s*r,m=l*o-u*r-s*i-c*a;return Br(t,e,n),r=t[0],i=t[1],a=t[2],o=t[3],t[4]=d*o+m*r+f*a-h*i,t[5]=f*o+m*i+h*r-d*a,t[6]=h*o+m*a+d*i-f*r,t[7]=m*o-d*r-f*i-h*a,t}function Bi(t,e,n){var r=-e[0],i=-e[1],a=-e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=u*o+l*r+s*a-c*i,f=s*o+l*i+c*r-u*a,h=c*o+l*a+u*i-s*r,m=l*o-u*r-s*i-c*a;return Pr(t,e,n),r=t[0],i=t[1],a=t[2],o=t[3],t[4]=d*o+m*r+f*a-h*i,t[5]=f*o+m*i+h*r-d*a,t[6]=h*o+m*a+d*i-f*r,t[7]=m*o-d*r-f*i-h*a,t}function Pi(t,e,n){var r=-e[0],i=-e[1],a=-e[2],o=e[3],u=e[4],s=e[5],c=e[6],l=e[7],d=u*o+l*r+s*a-c*i,f=s*o+l*i+c*r-u*a,h=c*o+l*a+u*i-s*r,m=l*o-u*r-s*i-c*a;return Dr(t,e,n),r=t[0],i=t[1],a=t[2],o=t[3],t[4]=d*o+m*r+f*a-h*i,t[5]=f*o+m*i+h*r-d*a,t[6]=h*o+m*a+d*i-f*r,t[7]=m*o-d*r-f*i-h*a,t}function Di(t,e,n){var r=n[0],i=n[1],a=n[2],o=n[3],u=e[0],s=e[1],c=e[2],l=e[3];return t[0]=u*o+l*r+s*a-c*i,t[1]=s*o+l*i+c*r-u*a,t[2]=c*o+l*a+u*i-s*r,t[3]=l*o-u*r-s*i-c*a,u=e[4],s=e[5],c=e[6],l=e[7],t[4]=u*o+l*r+s*a-c*i,t[5]=s*o+l*i+c*r-u*a,t[6]=c*o+l*a+u*i-s*r,t[7]=l*o-u*r-s*i-c*a,t}function _i(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=n[0],s=n[1],c=n[2],l=n[3];return t[0]=r*l+o*u+i*c-a*s,t[1]=i*l+o*s+a*u-r*c,t[2]=a*l+o*c+r*s-i*u,t[3]=o*l-r*u-i*s-a*c,u=n[4],s=n[5],c=n[6],l=n[7],t[4]=r*l+o*u+i*c-a*s,t[5]=i*l+o*s+a*u-r*c,t[6]=a*l+o*c+r*s-i*u,t[7]=o*l-r*u-i*s-a*c,t}function Ui(t,e,n,r){if(Math.abs(r)<h)return Ti(t,e);var i=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);r*=.5;var a=Math.sin(r),o=a*n[0]/i,u=a*n[1]/i,s=a*n[2]/i,c=Math.cos(r),l=e[0],d=e[1],f=e[2],m=e[3];t[0]=l*c+m*o+d*s-f*u,t[1]=d*c+m*u+f*o-l*s,t[2]=f*c+m*s+l*u-d*o,t[3]=m*c-l*o-d*u-f*s;var g=e[4],v=e[5],p=e[6],y=e[7];return t[4]=g*c+y*o+v*s-p*u,t[5]=v*c+y*u+p*o-g*s,t[6]=p*c+y*s+g*u-v*o,t[7]=y*c-g*o-v*u-p*s,t}function Ci(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t}function Fi(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],u=n[4],s=n[5],c=n[6],l=n[7],d=e[4],f=e[5],h=e[6],m=e[7],g=n[0],v=n[1],p=n[2],y=n[3];return t[0]=r*y+o*g+i*p-a*v,t[1]=i*y+o*v+a*g-r*p,t[2]=a*y+o*p+r*v-i*g,t[3]=o*y-r*g-i*v-a*p,t[4]=r*l+o*u+i*c-a*s+d*y+m*g+f*p-h*v,t[5]=i*l+o*s+a*u-r*c+f*y+m*v+h*g-d*p,t[6]=a*l+o*c+r*s-i*u+h*y+m*p+d*v-f*g,t[7]=o*l-r*u-i*s-a*c+m*y-d*g-f*v-h*p,t}var zi=Fi;function Oi(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t}var Vi=ti;function Ni(t,e,n,r){var i=1-r;return Vi(e,n)<0&&(r=-r),t[0]=e[0]*i+n[0]*r,t[1]=e[1]*i+n[1]*r,t[2]=e[2]*i+n[2]*r,t[3]=e[3]*i+n[3]*r,t[4]=e[4]*i+n[4]*r,t[5]=e[5]*i+n[5]*r,t[6]=e[6]*i+n[6]*r,t[7]=e[7]*i+n[7]*r,t}function ki(t,e){var n=ji(e);return t[0]=-e[0]/n,t[1]=-e[1]/n,t[2]=-e[2]/n,t[3]=e[3]/n,t[4]=-e[4]/n,t[5]=-e[5]/n,t[6]=-e[6]/n,t[7]=e[7]/n,t}function qi(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=e[7],t}var Gi=ni,Xi=Gi,ji=ii,Hi=ji;function Yi(t,e){var n=ji(e);if(n>0){n=Math.sqrt(n);var r=e[0]/n,i=e[1]/n,a=e[2]/n,o=e[3]/n,u=e[4],s=e[5],c=e[6],l=e[7],d=r*u+i*s+a*c+o*l;t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=(u-r*d)/n,t[5]=(s-i*d)/n,t[6]=(c-a*d)/n,t[7]=(l-o*d)/n}return t}function Wi(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"}function Zi(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]}function Ki(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=t[4],u=t[5],s=t[6],c=t[7],l=e[0],d=e[1],f=e[2],m=e[3],g=e[4],v=e[5],p=e[6],y=e[7];return Math.abs(n-l)<=h*Math.max(1,Math.abs(n),Math.abs(l))&&Math.abs(r-d)<=h*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-f)<=h*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(a-m)<=h*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(o-g)<=h*Math.max(1,Math.abs(o),Math.abs(g))&&Math.abs(u-v)<=h*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(s-p)<=h*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(c-y)<=h*Math.max(1,Math.abs(c),Math.abs(y))}function Qi(){var t=new m(2);return m!=Float32Array&&(t[0]=0,t[1]=0),t}function $i(t){var e=new m(2);return e[0]=t[0],e[1]=t[1],e}function Ji(t,e){var n=new m(2);return n[0]=t,n[1]=e,n}function ta(t,e){return t[0]=e[0],t[1]=e[1],t}function ea(t,e,n){return t[0]=e,t[1]=n,t}function na(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t}function ra(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t}function ia(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t}function aa(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t}function oa(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function ua(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function sa(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t}function ca(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t}function la(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function da(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t}function fa(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t}function ha(t,e){var n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}function ma(t,e){var n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}function ga(t){var e=t[0],n=t[1];return Math.sqrt(e*e+n*n)}function va(t){var e=t[0],n=t[1];return e*e+n*n}function pa(t,e){return t[0]=-e[0],t[1]=-e[1],t}function ya(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function ba(t,e){var n=e[0],r=e[1],i=n*n+r*r;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t}function Ta(t,e){return t[0]*e[0]+t[1]*e[1]}function xa(t,e,n){var r=e[0]*n[1]-e[1]*n[0];return t[0]=t[1]=0,t[2]=r,t}function Ma(t,e,n,r){var i=e[0],a=e[1];return t[0]=i+r*(n[0]-i),t[1]=a+r*(n[1]-a),t}function Ea(t,e){e=e||1;var n=2*g()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t}function wa(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[2]*i,t[1]=n[1]*r+n[3]*i,t}function Sa(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[2]*i+n[4],t[1]=n[1]*r+n[3]*i+n[5],t}function La(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[3]*i+n[6],t[1]=n[1]*r+n[4]*i+n[7],t}function Ia(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[4]*i+n[12],t[1]=n[1]*r+n[5]*i+n[13],t}function Ra(t,e,n,r){var i=e[0]-n[0],a=e[1]-n[1],o=Math.sin(r),u=Math.cos(r);return t[0]=i*u-a*o+n[0],t[1]=i*o+a*u+n[1],t}function Aa(t,e){var n=t[0],r=t[1],i=e[0],a=e[1],o=n*n+r*r;o>0&&(o=1/Math.sqrt(o));var u=i*i+a*a;u>0&&(u=1/Math.sqrt(u));var s=(n*i+r*a)*o*u;return s>1?0:s<-1?Math.PI:Math.acos(s)}function Ba(t){return t[0]=0,t[1]=0,t}function Pa(t){return"vec2("+t[0]+", "+t[1]+")"}function Da(t,e){return t[0]===e[0]&&t[1]===e[1]}function _a(t,e){var n=t[0],r=t[1],i=e[0],a=e[1];return Math.abs(n-i)<=h*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-a)<=h*Math.max(1,Math.abs(r),Math.abs(a))}var Ua=ga,Ca=ra,Fa=ia,za=aa,Oa=ha,Va=ma,Na=va,ka=function(){var t=Qi();return function(e,n,r,i,a,o){var u,s;for(n||(n=2),r||(r=0),s=i?Math.min(i*n+r,e.length):e.length,u=r;u<s;u+=n)t[0]=e[u],t[1]=e[u+1],a(t,t,o),e[u]=t[0],e[u+1]=t[1];return e}}();n.d(e,"glMatrix",(function(){return r})),n.d(e,"mat2",(function(){return i})),n.d(e,"mat2d",(function(){return a})),n.d(e,"mat3",(function(){return o})),n.d(e,"mat4",(function(){return u})),n.d(e,"quat",(function(){return l})),n.d(e,"quat2",(function(){return d})),n.d(e,"vec2",(function(){return f})),n.d(e,"vec3",(function(){return s})),n.d(e,"vec4",(function(){return c}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){}return t.initialize=function(t){var n=document.getElementById(t);if(void 0===n)throw new Error("Cannot find canvas element by id: "+t);if(e.gl=n.getContext("webgl2"),void 0===e.gl)throw new Error("Unable to initialize WebGL!");return console.log(e.gl.getParameter(e.gl.SHADING_LANGUAGE_VERSION)),n},t.detectDevice=function(){var t=e.gl.getExtension("WEBGL_debug_renderer_info"),n=e.gl.getParameter(t.UNMASKED_VENDOR_WEBGL),r=e.gl.getParameter(t.UNMASKED_RENDERER_WEBGL);return console.log("detected device:",n+" "+r),n+" "+r},t}();e.GLUtilities=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),i=n(0),a=function(){function t(t,e,n,a,o,u,s){void 0===o&&(o=i.vec2.fromValues(0,0)),void 0===u&&(u=i.vec2.fromValues(0,0)),void 0===s&&(s=i.vec2.fromValues(0,0)),this.a=t,this.b=e,this.c=n,this.normal=i.vec3.normalize(i.vec3.create(),i.vec3.cross(i.vec3.create(),i.vec3.sub(i.vec3.create(),this.a,this.b),i.vec3.sub(i.vec3.create(),this.b,this.c))),this.material=a,this.uvA=o,this.uvB=u,this.uvC=s;var c=Math.min(this.a[0],this.b[0],this.c[0]),l=Math.min(this.a[1],this.b[1],this.c[1]),d=Math.min(this.a[2],this.b[2],this.c[2]),f=Math.max(this.a[0],this.b[0],this.c[0]),h=Math.max(this.a[1],this.b[1],this.c[1]),m=Math.max(this.a[2],this.b[2],this.c[2]);this.boundingBox=new r.BoundingBox(0),this.boundingBox.min=i.vec3.fromValues(c,l,d),this.boundingBox.max=i.vec3.fromValues(f,h,m),this.boundingBox.calculateCenter()}return t.prototype.getA=function(){return this.a},t.prototype.getB=function(){return this.b},t.prototype.getC=function(){return this.c},t.prototype.getNormal=function(){return this.normal},t.prototype.getUvA=function(){return this.uvA},t.prototype.getUvB=function(){return this.uvB},t.prototype.getUvC=function(){return this.uvC},t.prototype.getMaterial=function(){return this.material},t.prototype.getBoundingBox=function(){return this.boundingBox},t.prototype.setUvA=function(t){this.uvA=t},t.prototype.setUvB=function(t){this.uvB=t},t.prototype.setUvC=function(t){this.uvC=t},t}();e.Triangle=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t){this.id=t}return t.prototype.getId=function(){return this.id},t.prototype.getCenter=function(){return this.center},t.prototype.calculateSurfaceArea=function(){var t=r.vec3.subtract(r.vec3.create(),this.max,this.min);return 2*((t=r.vec3.fromValues(Math.abs(t[0]),Math.abs(t[1]),Math.abs(t[2])))[0]*t[1]+t[0]*t[2]+t[2]*t[1])},t.prototype.calculateCenter=function(){this.center=r.vec3.add(r.vec3.create(),this.min,r.vec3.scale(r.vec3.create(),r.vec3.subtract(r.vec3.create(),this.max,this.min),.5))},t}();e.BoundingBox=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t,e){void 0===e&&(e=r.vec3.fromValues(.25,.25,.25)),this.id=t,this.color=e}return t.prototype.getId=function(){return this.id},t.prototype.getColor=function(){return this.color},t.prototype.setColor=function(t){this.color=t},t.prototype.setAlbedoTexture=function(t,e){void 0===e&&(e=!1),this.albedoTexture=t,this.hasAlpha=e},t.prototype.getalbedoTexture=function(){return this.albedoTexture},t.prototype.hasAlphaChannel=function(){return this.hasAlpha},t}();e.Material=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TOTAL_EVALUATION_FRAMES=500,e.WARM_UP_FRAME_COUNT=20;var r=function(){function t(){this.primitiveCount=0,this.mouseDownId=null,this.reset()}return t.prototype.getFps=function(){return this.fps},t.prototype.getFrameRate=function(){return this.frameRate},t.prototype.measureFPS=function(){var t=performance.now();if(this.frameCount++,this.elapsedTime+=t-this.lastTick,this.frameRate=t-this.lastTick,this.lastTick=t,this.elapsedTime>=1e3&&(this.fps=1e3/(this.elapsedTime/this.frameCount),this.frameCount=0,this.elapsedTime=0),!this.hasEvaluated&&this.evaluatedFrameCount<e.TOTAL_EVALUATION_FRAMES+e.WARM_UP_FRAME_COUNT){if(this.evaluatedFrameCount++,this.evaluatedFrameCount<e.WARM_UP_FRAME_COUNT)return;if(this.evaluatedFrameCount==e.WARM_UP_FRAME_COUNT)return void(this.evaluationStartTick=performance.now());if(this.frameTimes[this.evaluatedFrameCount-e.WARM_UP_FRAME_COUNT-1]=this.frameRate,this.evaluatedFrameCount==e.TOTAL_EVALUATION_FRAMES+e.WARM_UP_FRAME_COUNT){var n=(t-this.evaluationStartTick)/1e3;this.averageFps=(this.evaluatedFrameCount-e.WARM_UP_FRAME_COUNT)/n;for(var r=0,i=0;i<e.TOTAL_EVALUATION_FRAMES;i++)r+=this.frameTimes[i];r/=e.TOTAL_EVALUATION_FRAMES;var a=0;for(i=0;i<e.TOTAL_EVALUATION_FRAMES;i++)a+=(this.frameTimes[i]-r)*(this.frameTimes[i]-r);this.fpsDeviation=Math.sqrt(a/e.TOTAL_EVALUATION_FRAMES),this.hasEvaluated=!0}}},t.prototype.reset=function(){this.fps=0,this.frameRate=0,this.lastTick=performance.now(),this.evaluationStartTick=performance.now(),this.elapsedTime=0,this.frameCount=0,this.evaluatedFrameCount=0,this.fpsDeviation=0,this.frameTimes=[],this.isEvaluationRequested=!1,this.hasEvaluated=!1,this.averageFps=0},t}();e.Gauge=r},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,u)}s((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var a,o,u,s,c=n(7),l=n(15),d=n(1),f=n(5),h=n(5);function m(t){return r(this,void 0,void 0,(function(){var e,n,r,s,c,d,f,h,m,p,y,b,T;return i(this,(function(i){switch(i.label){case 0:return e=t.target,null!=o.mouseDownId?[3,13]:("moveUp"==e.id&&(o.mouseDownId=setInterval((function(){a.moveUp()}),10)),"moveDown"==e.id&&(o.mouseDownId=setInterval((function(){a.moveDown()}),10)),"moveLeft"==e.id&&(o.mouseDownId=setInterval((function(){a.moveLeft()}),10)),"moveRight"==e.id&&(o.mouseDownId=setInterval((function(){a.moveRight()}),10)),"zoomIn"==e.id&&(o.mouseDownId=setInterval((function(){a.zoomIn()}),10)),"zoomOut"==e.id&&(o.mouseDownId=setInterval((function(){a.zoomOut()}),10)),"rotateUp"==e.id&&(o.mouseDownId=setInterval((function(){a.rotateUp()}),10)),"rotateDown"==e.id&&(o.mouseDownId=setInterval((function(){a.rotateDown()}),10)),"rotateLeft"==e.id&&(o.mouseDownId=setInterval((function(){a.rotateLeft()}),10)),"rotateRight"==e.id&&(o.mouseDownId=setInterval((function(){a.rotateRight()}),10)),"render"==e.id&&(document.getElementById("render").disabled=!0,document.getElementById("stop").disabled=!1,a.start()),"stop"==e.id&&(document.getElementById("render").disabled=!1,document.getElementById("stop").disabled=!0,a.stop()),"changeScene1"!=e.id?[3,2]:(g(),r=(n=a).setScene,[4,l.SceneFactory.createBasicScene(u)]));case 1:r.apply(n,[i.sent()]),v(),i.label=2;case 2:return"changeScene2"!=e.id?[3,4]:(g(),c=(s=a).setScene,[4,l.SceneFactory.createDuckScene(u)]);case 3:c.apply(s,[i.sent()]),v(),i.label=4;case 4:return"changeScene3"!=e.id?[3,6]:(g(),f=(d=a).setScene,[4,l.SceneFactory.createSuzanneScene(u)]);case 5:f.apply(d,[i.sent()]),v(),i.label=6;case 6:return"changeScene4"!=e.id?[3,8]:(g(),m=(h=a).setScene,[4,l.SceneFactory.createAvocadoScene(u)]);case 7:m.apply(h,[i.sent()]),v(),i.label=8;case 8:return"changeScene5"!=e.id?[3,10]:(g(),y=(p=a).setScene,[4,l.SceneFactory.createSponzaScene(u)]);case 9:y.apply(p,[i.sent()]),v(),i.label=10;case 10:return"changeScene6"!=e.id?[3,12]:(g(),T=(b=a).setScene,[4,l.SceneFactory.createPicaRoomScene(u)]);case 11:T.apply(b,[i.sent()]),v(),i.label=12;case 12:"evaluate"==e.id&&(o.isEvaluationRequested=!0),i.label=13;case 13:return[2]}}))}))}function g(){a.stop(),u.style.display="none",s.style.display="block";for(var t=document.getElementsByTagName("button"),e=0;e<t.length;e++)t[e].disabled=!0;document.getElementById("canvasSizeSelect").disabled=!0,document.getElementById("fps").innerHTML="...",document.getElementById("primitiveCount").innerHTML="...",document.getElementById("totalEvaluationFrames").innerHTML="..."}function v(){a.start(),u.style.display="block",s.style.display="none";for(var t=document.getElementsByTagName("button"),e=0;e<t.length;e++)t[e].disabled=!1;document.getElementById("render").disabled=!0,document.getElementById("canvasSizeSelect").disabled=!1}function p(t){clearInterval(o.mouseDownId),o.mouseDownId=null}function y(){return r(this,void 0,void 0,(function(){var t,e,n,r,o;return i(this,(function(i){switch(i.label){case 0:return t=document.getElementById("renderer"),e=document.getElementById("canvasSizeSelect"),n=e.options[e.selectedIndex].value.split(":",2),u.width=+n[0],u.height=+n[1],t.style.width=n[0]+"px",t.style.height=n[1]+"px",a.resize(u),g(),o=(r=a).setScene,[4,l.SceneFactory.createBasicScene(u)];case 1:return o.apply(r,[i.sent()]),v(),[2]}}))}))}window.onload=function(){return r(this,void 0,void 0,(function(){var t,e,n,r,b;return i(this,(function(i){switch(i.label){case 0:return u=d.GLUtilities.initialize("pathTracer"),s=document.getElementById("loader"),o=new f.Gauge,a=new c.Renderer(u,o),g(),e=(t=a).setScene,[4,l.SceneFactory.createBasicScene(u)];case 1:return e.apply(t,[i.sent()]),v(),n=document.getElementById("fps"),r=document.getElementById("primitiveCount"),b=document.getElementById("totalEvaluationFrames"),setInterval((function(){a.isRunning()&&(n.innerHTML=o.getFrameRate().toFixed(0)+" ms per frame ("+o.getFps().toFixed(1)+" FPS)",r.innerHTML=o.primitiveCount+" primitives",o.evaluatedFrameCount>h.WARM_UP_FRAME_COUNT&&(b.innerHTML=o.evaluatedFrameCount-h.WARM_UP_FRAME_COUNT+"/"+h.TOTAL_EVALUATION_FRAMES),o.isEvaluationRequested&&o.hasEvaluated&&(window.alert("Performance evaluation has been completed! \n\nBVH build time: "+o.bvhBuildTime.toFixed(2)+" ms \nAverage performance: "+o.averageFps.toFixed(2)+" FPS \nStandard deviation of rendering time per frame: "+o.fpsDeviation.toFixed(2)+"ms \n"),o.isEvaluationRequested=!1,document.getElementById("render").disabled=!1,document.getElementById("stop").disabled=!0,a.stop()))}),200),document.getElementById("device").innerHTML=d.GLUtilities.detectDevice(),document.getElementById("canvasSizeSelect").addEventListener("change",y,!1),document.getElementById("moveUp").addEventListener("mousedown",m,!1),document.getElementById("moveUp").addEventListener("mouseup",p,!1),document.getElementById("moveUp").addEventListener("touchstart",m,!1),document.getElementById("moveUp").addEventListener("touchend",p,!1),document.getElementById("moveDown").addEventListener("mousedown",m,!1),document.getElementById("moveDown").addEventListener("mouseup",p,!1),document.getElementById("moveDown").addEventListener("touchstart",m,!1),document.getElementById("moveDown").addEventListener("touchend",p,!1),document.getElementById("moveLeft").addEventListener("mousedown",m,!1),document.getElementById("moveLeft").addEventListener("mouseup",p,!1),document.getElementById("moveLeft").addEventListener("touchstart",m,!1),document.getElementById("moveLeft").addEventListener("touchend",p,!1),document.getElementById("moveRight").addEventListener("mousedown",m,!1),document.getElementById("moveRight").addEventListener("mouseup",p,!1),document.getElementById("moveRight").addEventListener("touchstart",m,!1),document.getElementById("moveRight").addEventListener("touchend",p,!1),document.getElementById("zoomIn").addEventListener("mousedown",m,!1),document.getElementById("zoomIn").addEventListener("mouseup",p,!1),document.getElementById("zoomIn").addEventListener("touchstart",m,!1),document.getElementById("zoomIn").addEventListener("touchend",p,!1),document.getElementById("zoomOut").addEventListener("mousedown",m,!1),document.getElementById("zoomOut").addEventListener("mouseup",p,!1),document.getElementById("zoomOut").addEventListener("touchstart",m,!1),document.getElementById("zoomOut").addEventListener("touchend",p,!1),document.getElementById("rotateUp").addEventListener("mousedown",m,!1),document.getElementById("rotateUp").addEventListener("mouseup",p,!1),document.getElementById("rotateUp").addEventListener("touchstart",m,!1),document.getElementById("rotateUp").addEventListener("touchend",p,!1),document.getElementById("rotateDown").addEventListener("mousedown",m,!1),document.getElementById("rotateDown").addEventListener("mouseup",p,!1),document.getElementById("rotateDown").addEventListener("touchstart",m,!1),document.getElementById("rotateDown").addEventListener("touchend",p,!1),document.getElementById("rotateLeft").addEventListener("mousedown",m,!1),document.getElementById("rotateLeft").addEventListener("mouseup",p,!1),document.getElementById("rotateLeft").addEventListener("touchstart",m,!1),document.getElementById("rotateLeft").addEventListener("touchend",p,!1),document.getElementById("rotateRight").addEventListener("mousedown",m,!1),document.getElementById("rotateRight").addEventListener("mouseup",p,!1),document.getElementById("rotateRight").addEventListener("touchstart",m,!1),document.getElementById("rotateRight").addEventListener("touchend",p,!1),document.getElementById("render").addEventListener("mousedown",m,!1),document.getElementById("render").addEventListener("mouseup",p,!1),document.getElementById("render").addEventListener("touchstart",m,!1),document.getElementById("render").addEventListener("touchend",p,!1),document.getElementById("stop").addEventListener("mousedown",m,!1),document.getElementById("stop").addEventListener("mouseup",p,!1),document.getElementById("stop").addEventListener("touchstart",m,!1),document.getElementById("stop").addEventListener("touchend",p,!1),document.getElementById("changeScene1").addEventListener("mousedown",m,!1),document.getElementById("changeScene1").addEventListener("mouseup",p,!1),document.getElementById("changeScene1").addEventListener("touchstart",m,!1),document.getElementById("changeScene1").addEventListener("touchend",p,!1),document.getElementById("changeScene2").addEventListener("mousedown",m,!1),document.getElementById("changeScene2").addEventListener("mouseup",p,!1),document.getElementById("changeScene2").addEventListener("touchstart",m,!1),document.getElementById("changeScene2").addEventListener("touchend",p,!1),document.getElementById("changeScene3").addEventListener("mousedown",m,!1),document.getElementById("changeScene3").addEventListener("mouseup",p,!1),document.getElementById("changeScene3").addEventListener("touchstart",m,!1),document.getElementById("changeScene3").addEventListener("touchend",p,!1),document.getElementById("changeScene4").addEventListener("mousedown",m,!1),document.getElementById("changeScene4").addEventListener("mouseup",p,!1),document.getElementById("changeScene4").addEventListener("touchstart",m,!1),document.getElementById("changeScene4").addEventListener("touchend",p,!1),document.getElementById("changeScene5").addEventListener("mousedown",m,!1),document.getElementById("changeScene5").addEventListener("mouseup",p,!1),document.getElementById("changeScene5").addEventListener("touchstart",m,!1),document.getElementById("changeScene5").addEventListener("touchend",p,!1),document.getElementById("changeScene6").addEventListener("mousedown",m,!1),document.getElementById("changeScene6").addEventListener("mouseup",p,!1),document.getElementById("changeScene6").addEventListener("touchstart",m,!1),document.getElementById("changeScene6").addEventListener("touchend",p,!1),document.getElementById("evaluate").addEventListener("mousedown",m,!1),document.getElementById("evaluate").addEventListener("mouseup",p,!1),document.getElementById("evaluate").addEventListener("touchstart",m,!1),document.getElementById("evaluate").addEventListener("touchend",p,!1),window.addEventListener("keydown",(function(t){[32,37,38,39,40].indexOf(t.keyCode)>-1&&t.preventDefault()}),!1),[2]}}))}))},document.onkeydown=function(t){if(87==t.keyCode&&a.moveUp(),83==t.keyCode&&a.moveDown(),65==t.keyCode&&a.moveLeft(),68==t.keyCode&&a.moveRight(),189==t.keyCode&&a.zoomOut(),187==t.keyCode&&a.zoomIn(),38==t.keyCode&&a.rotateUp(),40==t.keyCode&&a.rotateDown(),37==t.keyCode&&a.rotateLeft(),39==t.keyCode&&a.rotateRight(),109==t.keyCode&&a.zoomOut(),107==t.keyCode&&a.zoomIn(),32==t.keyCode){var e=document.getElementById("stop"),n=document.getElementById("render");n.disabled?(e.disabled=!0,n.disabled=!1,a.stop()):(e.disabled=!1,n.disabled=!0,a.start())}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(8),i=n(1),a=function(){function t(t,e){this.canvas=t,this.gauge=e,this.pathTracer=new r.PathTracer(this.canvas)}return t.prototype.start=function(){i.gl.clearColor(0,0,0,1),i.gl.clear(i.gl.COLOR_BUFFER_BIT|i.gl.DEPTH_BUFFER_BIT),this.gauge.reset(),this.isRendering=!0,this.tick()},t.prototype.stop=function(){this.isRendering=!1},t.prototype.resize=function(t){this.stop(),this.canvas=t,this.pathTracer=new r.PathTracer(this.canvas),i.gl.canvas.width=this.canvas.width,i.gl.canvas.height=this.canvas.height,i.gl.viewport(0,0,i.gl.canvas.width,i.gl.canvas.height)},t.prototype.setScene=function(t){this.scene=t,this.pathTracer.setScene(this.scene),this.gauge.primitiveCount=this.scene.getTriangles().length,this.gauge.bvhBuildTime=this.scene.getBVH().getBuildingTime()},t.prototype.isRunning=function(){return this.isRendering},t.prototype.tick=function(){this.isRendering&&(this.pathTracer.render(),this.gauge.measureFPS(),requestAnimationFrame(this.tick.bind(this)))},t.prototype.restart=function(){this.scene.getCamera().calculateViewProjection(),this.pathTracer.restart()},t.prototype.moveUp=function(){this.scene.getCamera().moveUp(),this.restart()},t.prototype.moveDown=function(){this.scene.getCamera().moveDown(),this.restart()},t.prototype.moveRight=function(){this.scene.getCamera().moveRight(),this.restart()},t.prototype.moveLeft=function(){this.scene.getCamera().moveLeft(),this.restart()},t.prototype.zoomIn=function(){this.scene.getCamera().zoomIn(),this.restart()},t.prototype.zoomOut=function(){this.scene.getCamera().zoomOut(),this.restart()},t.prototype.rotateUp=function(){this.scene.getCamera().rotateUp(),this.restart()},t.prototype.rotateDown=function(){this.scene.getCamera().rotateDown(),this.restart()},t.prototype.rotateRight=function(){this.scene.getCamera().rotateRight(),this.restart()},t.prototype.rotateLeft=function(){this.scene.getCamera().rotateLeft(),this.restart()},t}();e.Renderer=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),i=n(9),a=n(10),o=function(){function t(t){this.canvas=t;var e=r.gl.getExtension("OES_texture_float")?r.gl.FLOAT:r.gl.UNSIGNED_BYTE;this.outputTextures=[];for(var o=0;o<2;o++)this.outputTextures.push(r.gl.createTexture()),r.gl.bindTexture(r.gl.TEXTURE_2D,this.outputTextures[o]),r.gl.texParameteri(r.gl.TEXTURE_2D,r.gl.TEXTURE_MIN_FILTER,r.gl.NEAREST),r.gl.texParameteri(r.gl.TEXTURE_2D,r.gl.TEXTURE_MAG_FILTER,r.gl.NEAREST),r.gl.texParameterf(r.gl.TEXTURE_2D,r.gl.TEXTURE_WRAP_S,r.gl.CLAMP_TO_EDGE),r.gl.texParameterf(r.gl.TEXTURE_2D,r.gl.TEXTURE_WRAP_T,r.gl.CLAMP_TO_EDGE),r.gl.texImage2D(r.gl.TEXTURE_2D,0,r.gl.RGB,this.canvas.width,this.canvas.height,0,r.gl.RGB,e,null);r.gl.bindTexture(r.gl.TEXTURE_2D,null),this.pathTracerShader=new a.Shader("tracer",n(11),n(12)),this.renderShader=new a.Shader("render",n(13),n(14)),this.frameBuffer=r.gl.createFramebuffer();var u=new i.AttributeInformation;u.location=this.renderShader.getAttributeLocation("vertex"),u.offset=0,u.size=2,this.vertexBuffer=new i.GLBuffer(2,r.gl.FLOAT,r.gl.ARRAY_BUFFER,r.gl.TRIANGLE_STRIP),this.vertexBuffer.pushBackData([-1,-1,-1,1,1,-1,1,1]),this.vertexBuffer.addAttributeLocation(u)}return t.prototype.render=function(){this.update(),this.renderShader.use(),r.gl.bindFramebuffer(r.gl.FRAMEBUFFER,null),r.gl.bindTexture(r.gl.TEXTURE_2D,this.outputTextures[0]),this.vertexBuffer.draw()},t.prototype.getRandomInt=function(t){return Math.floor(Math.random()*Math.floor(t))},t.prototype.update=function(){var t={};t.eye=[this.scene.getCamera().getPosition(),a.ShaderDataType.vec3],t.ray00=[this.scene.getCamera().getRay(-1,-1),a.ShaderDataType.vec3],t.ray01=[this.scene.getCamera().getRay(-1,1),a.ShaderDataType.vec3],t.ray10=[this.scene.getCamera().getRay(1,-1),a.ShaderDataType.vec3],t.ray11=[this.scene.getCamera().getRay(1,1),a.ShaderDataType.vec3],t.textureWeight=[this.sampleCount/(this.sampleCount+1),a.ShaderDataType.float],t.hostSeed=[this.getRandomInt(this.canvas.width*this.canvas.width),a.ShaderDataType.uint],this.pathTracerShader.use(),this.pathTracerShader.setUniforms(t),r.gl.activeTexture(r.gl.TEXTURE0),r.gl.bindTexture(r.gl.TEXTURE_2D,this.outputTextures[0]),r.gl.bindFramebuffer(r.gl.FRAMEBUFFER,this.frameBuffer),r.gl.framebufferTexture2D(r.gl.FRAMEBUFFER,r.gl.COLOR_ATTACHMENT0,r.gl.TEXTURE_2D,this.outputTextures[1],0),this.vertexBuffer.upload(),this.vertexBuffer.draw(),this.outputTextures.reverse(),this.sampleCount++},t.prototype.restart=function(){this.sampleCount=0},t.prototype.setScene=function(t){this.scene=t,this.setSceneData(),this.restart()},t.prototype.setSceneData=function(){console.log("gl.MAX_TEXTURE_SIZE",r.gl.MAX_TEXTURE_SIZE);var t={};t.resolution=[[this.canvas.width,this.canvas.height],a.ShaderDataType.vec2],t.isSkydomeLoaded=[!1,a.ShaderDataType.int],this.pathTracerShader.use(),this.pathTracerShader.setTriangleData(this.scene.getTriangles(),this.scene.getBVH().getTriangleIndices()),this.pathTracerShader.setBvhData(this.scene.getBVH().getNodeList()),this.pathTracerShader.setMaterials(this.scene.getMaterials()),this.pathTracerShader.setLights(this.scene.getLights()),null!=this.scene.getSkydome()&&(t.isSkydomeLoaded=[!0,a.ShaderDataType.int],this.pathTracerShader.setSkydome(this.scene.getSkydome())),this.pathTracerShader.setUniforms(t)},t}();e.PathTracer=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),i=function(){};e.AttributeInformation=i;var a=function(){function t(t,e,n,i){switch(void 0===e&&(e=r.gl.FLOAT),void 0===n&&(n=r.gl.ARRAY_BUFFER),void 0===i&&(i=r.gl.TRIANGLES),this.hasAttributeLocation=!1,this.data=[],this.attributes=[],this.elementSize=t,this.dataType=e,this.bufferType=n,this.mode=i,this.dataType){case r.gl.FLOAT:case r.gl.INT:case r.gl.UNSIGNED_INT:this.dataTypeSize=4;break;case r.gl.SHORT:case r.gl.UNSIGNED_SHORT:this.dataTypeSize=2;break;case r.gl.BYTE:case r.gl.UNSIGNED_BYTE:this.dataTypeSize=1;break;default:throw new Error("Unrecognized data type '"+e.toString()+"'")}this.stride=this.elementSize*this.dataTypeSize,this._buffer=r.gl.createBuffer()}return t.prototype.destroy=function(){r.gl.deleteBuffer(this._buffer)},t.prototype.bind=function(t){if(void 0===t&&(t=!1),r.gl.bindBuffer(this.bufferType,this._buffer),this.hasAttributeLocation)for(var e=0,n=this.attributes;e<n.length;e++){var i=n[e];r.gl.vertexAttribPointer(i.location,i.size,this.dataType,t,this.stride,i.offset*this.dataTypeSize),r.gl.enableVertexAttribArray(i.location)}},t.prototype.unbind=function(){r.gl.bindBuffer(this.bufferType,void 0);for(var t=0,e=this.attributes;t<e.length;t++){var n=e[t];r.gl.disableVertexAttribArray(n.location)}},t.prototype.addAttributeLocation=function(t){this.hasAttributeLocation=!0,this.attributes.push(t)},t.prototype.pushBackData=function(t){for(var e=0,n=t;e<n.length;e++){var r=n[e];this.data.push(r)}},t.prototype.upload=function(){var t;switch(r.gl.bindBuffer(this.bufferType,this._buffer),this.dataType){case r.gl.FLOAT:t=new Float32Array(this.data);break;case r.gl.INT:t=new Int32Array(this.data);break;case r.gl.UNSIGNED_INT:t=new Uint32Array(this.data);break;case r.gl.SHORT:t=new Int16Array(this.data);break;case r.gl.UNSIGNED_SHORT:t=new Uint16Array(this.data);break;case r.gl.BYTE:t=new Int8Array(this.data);break;case r.gl.UNSIGNED_BYTE:t=new Uint8Array(this.data)}r.gl.bufferData(this.bufferType,t,r.gl.STATIC_DRAW)},t.prototype.draw=function(){this.bind(),this.bufferType==r.gl.ARRAY_BUFFER?r.gl.drawArrays(this.mode,0,this.data.length/this.elementSize):this.bufferType==r.gl.ELEMENT_ARRAY_BUFFER&&r.gl.drawElements(this.mode,this.data.length,this.dataType,0)},t}();e.GLBuffer=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,i=n(1);!function(t){t[t.int=0]="int",t[t.uint=1]="uint",t[t.float=2]="float",t[t.vec2=3]="vec2",t[t.vec3=4]="vec3"}(r=e.ShaderDataType||(e.ShaderDataType={}));var a=function(){function t(t,e,n){this.attributes={},this.uniforms={},this.name=t;var r=this.loadShader(e,i.gl.VERTEX_SHADER),a=this.loadShader(n,i.gl.FRAGMENT_SHADER);this.createProgram(r,a),this.detectAttributes(),this.detectUniforms()}return t.prototype.getAttributeLocation=function(t){if(void 0===this.attributes[t])throw new Error('Unable to find attribute "'+t+'" in shader "'+this.name+'"');return this.attributes[t]},t.prototype.getUniformLocation=function(t){if(void 0===this.uniforms[t])throw new Error('Unable to find uniform "'+t+'" in shader "'+this.name+'"');return this.uniforms[t]},t.prototype.setUniforms=function(t){for(var e in t){var n=i.gl.getUniformLocation(this.program,e);if(null!=n){var a=t[e][0],o=t[e][1];o==r.int?i.gl.uniform1i(n,a):o==r.uint?i.gl.uniform1ui(n,a):o==r.float?i.gl.uniform1f(n,a):o==r.vec2?i.gl.uniform2fv(n,new Float32Array([a[0],a[1]])):o==r.vec3&&i.gl.uniform3fv(n,new Float32Array([a[0],a[1],a[2]]))}}},t.prototype.setTriangleData=function(t,e){for(var n=this.calculateTextureSize(4096,12),a=n[0],o=n[1],u=new Float32Array(a*a*3),s=0;s<t.length;s++){var c=t[s];u[3*s*7+0]=c.getA()[0],u[3*s*7+1]=c.getA()[1],u[3*s*7+2]=c.getA()[2],u[3*s*7+3]=c.getB()[0],u[3*s*7+4]=c.getB()[1],u[3*s*7+5]=c.getB()[2],u[3*s*7+6]=c.getC()[0],u[3*s*7+7]=c.getC()[1],u[3*s*7+8]=c.getC()[2],u[3*s*7+9]=c.getUvA()[0],u[3*s*7+10]=c.getUvA()[1],u[3*s*7+11]=c.getUvB()[0],u[3*s*7+12]=c.getUvB()[1],u[3*s*7+13]=c.getUvC()[0],u[3*s*7+14]=c.getUvC()[1],u[3*s*7+15]=c.getMaterial().getId(),u[3*s*7+16]=e[s],u[3*s*7+17]=1,u[3*s*7+18]=c.getNormal()[0],u[3*s*7+19]=c.getNormal()[1],u[3*s*7+20]=c.getNormal()[2]}i.gl.activeTexture(i.gl.TEXTURE1),i.gl.bindTexture(i.gl.TEXTURE_2D,i.gl.createTexture()),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MIN_FILTER,i.gl.NEAREST),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MAG_FILTER,i.gl.NEAREST),i.gl.texImage2D(i.gl.TEXTURE_2D,0,i.gl.RGB32F,a,a,0,i.gl.RGB,i.gl.FLOAT,u);var l=i.gl.getUniformLocation(this.program,"triangleDataTexture");i.gl.uniform1i(l,1),this.setUniforms({triangleDataTextureSize:[a,r.int],triangleDataTextureSizePower:[o,r.int]})},t.prototype.setLights=function(t){for(var e=this.calculateTextureSize(512,9),n=e[0],a=e[1],o=new Float32Array(n*n*3),u=0;u<t.length;u++){var s=t[u];o[3*u*2+0]=s.getPosition()[0],o[3*u*2+1]=s.getPosition()[1],o[3*u*2+2]=s.getPosition()[2],o[3*u*2+3]=s.getRadius(),o[3*u*2+4]=s.getIntensity(),o[3*u*2+5]=1}i.gl.activeTexture(i.gl.TEXTURE2),i.gl.bindTexture(i.gl.TEXTURE_2D,i.gl.createTexture()),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MIN_FILTER,i.gl.NEAREST),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MAG_FILTER,i.gl.NEAREST),i.gl.texImage2D(i.gl.TEXTURE_2D,0,i.gl.RGB32F,n,n,0,i.gl.RGB,i.gl.FLOAT,o);var c=i.gl.getUniformLocation(this.program,"lightDataTexture");i.gl.uniform1i(c,2),this.setUniforms({lightDataTextureSize:[n,r.int],lightDataTextureSizePower:[a,r.int],totalLights:[t.length,r.int]})},t.prototype.setBvhData=function(t){for(var e=this.calculateTextureSize(2048,11),n=e[0],a=e[1],o=new Float32Array(n*n*3),u=0;u<t.length;u++){var s=t[u];o[3*u*4+0]=s.min[0],o[3*u*4+1]=s.min[1],o[3*u*4+2]=s.min[2],o[3*u*4+3]=s.max[0],o[3*u*4+4]=s.max[1],o[3*u*4+5]=s.max[2],o[3*u*4+6]=s.isLeaf?1:0,o[3*u*4+7]=s.first,o[3*u*4+8]=s.count,s.isLeaf?(o[3*u*4+9]=1,o[3*u*4+10]=1,o[3*u*4+11]=s.getId()):(o[3*u*4+9]=s.left.getId(),o[3*u*4+10]=s.right.getId(),o[3*u*4+11]=s.getId())}i.gl.activeTexture(i.gl.TEXTURE3),i.gl.bindTexture(i.gl.TEXTURE_2D,i.gl.createTexture()),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MIN_FILTER,i.gl.NEAREST),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MAG_FILTER,i.gl.NEAREST),i.gl.texImage2D(i.gl.TEXTURE_2D,0,i.gl.RGB32F,n,n,0,i.gl.RGB,i.gl.FLOAT,o);var c=i.gl.getUniformLocation(this.program,"bvhDataTexture");i.gl.uniform1i(c,3),this.setUniforms({bvhDataTextureSize:[n,r.int],bvhDataTextureSizePower:[a,r.int]})},t.prototype.setMaterials=function(t){var e=this.calculateTextureSize(2048,11),n=e[0],a=e[1],o=(e=this.calculateTextureSize(2048,11))[0],u=e[1];console.log("actual GL texture size for albedo images",o);var s=0,c=0,l=[],d=new Float32Array(n*n*3);console.log("total materials",t.length);for(var f=0;f<t.length;f++){var h=t[f];d[3*f*3+0]=h.getColor()[0],d[3*f*3+1]=h.getColor()[1],d[3*f*3+2]=h.getColor()[2],null!=h.getalbedoTexture()?(c+h.getalbedoTexture().getData().length/4>o*o&&(this.setMaterialAlbedoTexture(s,l,o),l=[],c=0,s++),d[3*f*3+3]=1,d[3*f*3+4]=s,d[3*f*3+5]=c,d[3*f*3+6]=h.getalbedoTexture().getWidth(),d[3*f*3+7]=h.getalbedoTexture().getHeight(),d[3*f*3+8]=h.hasAlphaChannel()?1:0,l.push(h.getalbedoTexture().getData()),c+=h.getalbedoTexture().getData().length/4):(d[3*f*3+3]=0,d[3*f*3+4]=0,d[3*f*3+5]=0,d[3*f*3+6]=0,d[3*f*3+7]=0,d[3*f*3+8]=0)}this.setMaterialAlbedoTexture(s,l,o),i.gl.activeTexture(i.gl.TEXTURE4),i.gl.bindTexture(i.gl.TEXTURE_2D,i.gl.createTexture()),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MIN_FILTER,i.gl.NEAREST),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MAG_FILTER,i.gl.NEAREST),i.gl.texImage2D(i.gl.TEXTURE_2D,0,i.gl.RGB32F,n,n,0,i.gl.RGB,i.gl.FLOAT,d);var m=i.gl.getUniformLocation(this.program,"materialsTexture");i.gl.uniform1i(m,4),this.setUniforms({materialsTextureSize:[n,r.int],materialsTextureSizePower:[a,r.int],albedoTextureSize:[o,r.int],albedoTextureSizePower:[u,r.int]})},t.prototype.setMaterialAlbedoTexture=function(t,e,n){t>=7&&console.log("Maximum 7 textures dedicated in the shader for albedo color!"),console.log("setting albedo texture",t);for(var r=new Float32Array(n*n*4),a=0,o=0;o<e.length;o++)for(var u=e[o],s=0;s<u.length;s++)r[a]=u[s],a++;i.gl.activeTexture(i.gl.TEXTURE5+t),i.gl.bindTexture(i.gl.TEXTURE_2D,i.gl.createTexture()),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MIN_FILTER,i.gl.NEAREST),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MAG_FILTER,i.gl.NEAREST),i.gl.texImage2D(i.gl.TEXTURE_2D,0,i.gl.RGBA32F,n,n,0,i.gl.RGBA,i.gl.FLOAT,r);var c=i.gl.getUniformLocation(this.program,"albedoTexture"+(t+1));i.gl.uniform1i(c,5+t)},t.prototype.setSkydome=function(t){for(var e=this.calculateTextureSize(2048,11),n=e[0],i=e[1],a=new Float32Array(n*n*3),o=0,u=0,s=!0,c=0;c<t.getWidth()*t.getHeight();c++)a[3*o+0]=t.getData()[4*c+0],a[3*o+1]=t.getData()[4*c+1],a[3*o+2]=t.getData()[4*c+2],3*++o>=a.length?(this.setSkydomeTexture(u,a,n),a=new Float32Array(n*n*3),o=0,u++,s=!0):s=!1;s||this.setSkydomeTexture(u,a,n),this.setUniforms({skydomeTextureSize:[n,r.int],skydomeTextureSizePower:[i,r.int],skydomeWidth:[t.getWidth(),r.float],skydomeHeight:[t.getHeight(),r.float]})},t.prototype.setSkydomeTexture=function(t,e,n){t>=4&&console.log("Maximum 4 textures dedicated in the shader for skydome!"),console.log("setting skydome texture",t),i.gl.activeTexture(i.gl.TEXTURE12+t),i.gl.bindTexture(i.gl.TEXTURE_2D,i.gl.createTexture()),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MIN_FILTER,i.gl.NEAREST),i.gl.texParameteri(i.gl.TEXTURE_2D,i.gl.TEXTURE_MAG_FILTER,i.gl.NEAREST),i.gl.texImage2D(i.gl.TEXTURE_2D,0,i.gl.RGB32F,n,n,0,i.gl.RGB,i.gl.FLOAT,e);var r=i.gl.getUniformLocation(this.program,"skydomeTexture"+(t+1));i.gl.uniform1i(r,12+t)},t.prototype.use=function(){i.gl.useProgram(this.program)},t.prototype.delete=function(){i.gl.deleteProgram(this.program)},t.prototype.loadShader=function(t,e){var n=i.gl.createShader(e);i.gl.shaderSource(n,t),i.gl.compileShader(n);var r=i.gl.getShaderInfoLog(n);if(""!==r)throw new Error('Error compiling shader "'+this.name+'": "'+r+'"');return n},t.prototype.createProgram=function(t,e){this.program=i.gl.createProgram(),i.gl.attachShader(this.program,t),i.gl.attachShader(this.program,e),i.gl.linkProgram(this.program);var n=i.gl.getProgramInfoLog(this.program);if(""!==n)throw new Error('Error linking shader "'+this.name+'": '+n+'"')},t.prototype.detectAttributes=function(){for(var t=i.gl.getProgramParameter(this.program,i.gl.ACTIVE_ATTRIBUTES),e=0;e<t;e++){var n=i.gl.getActiveAttrib(this.program,e);if(!n)break;this.attributes[n.name]=i.gl.getAttribLocation(this.program,n.name)}},t.prototype.detectUniforms=function(){for(var t=i.gl.getProgramParameter(this.program,i.gl.ACTIVE_UNIFORMS),e=0;e<t;e++){var n=i.gl.getActiveUniform(this.program,e);if(!n)break;this.uniforms[n.name]=i.gl.getUniformLocation(this.program,n.name)}},t.prototype.calculateTextureSize=function(t,e){var n=i.gl.MAX_TEXTURE_SIZE;if(t<=n)return[t,e];for(var r=t,a=e;r>n;)r/=2,a--;return[r,a]},t}();e.Shader=a},function(t,e){t.exports="#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\n\r\nin vec3 vertex;\r\nout vec3 initialRay;\r\nuniform vec3 eye, ray00, ray01, ray10, ray11;\r\n\r\nvoid main() {\r\n    vec2 percent = vertex.xy * 0.5 + 0.5;\r\n    initialRay = mix(mix(ray00, ray01, percent.y), mix(ray10, ray11, percent.y), percent.x);\r\n    gl_Position = vec4(vertex, 1.0);\r\n}"},function(t,e){t.exports="#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\n\r\n#define EPSILON 0.0001\r\n#define INFINITY 10000.0\r\n\r\n#define PI 3.14159\r\n#define INVERSE_PI 1.0 / PI\r\n\r\n#define BOUNCES 3\r\n#define STACK_SIZE 256\r\n#define SMALL_STACK_SIZE 16\r\n\r\nstruct Ray\r\n{\r\n    vec3 origin, direction;\r\n    float t;\r\n};\r\n\r\nstruct Triangle\r\n{\r\n    vec3 a, b, c, normal;\r\n    vec2 uvA, uvB, uvC;\r\n    int materialID;\r\n};\r\nstruct Material\r\n{\r\n    vec3 baseColor;\r\n\r\n    // albedo\r\n    int albedoTextureId;\r\n    \r\n    bool hasAlbedoTexture;\r\n    bool hasAlpha;\r\n\r\n    int albedoPixelOffset;\r\n    \r\n    float albedoTextureWidth;\r\n    float albedoTextureHeight;\r\n};\r\nstruct BoundingBox\r\n{\r\n    vec3 min, max;\r\n    \r\n    bool isLeaf;\r\n    int first, count;\r\n    int left, right, id;\r\n};\r\nstruct Intersection\r\n{\r\n    float t;\r\n    vec3 hit;\r\n    vec2 uv;\r\n    \r\n    Triangle triangle;\r\n    Material material;\r\n};\r\n\r\nstruct Sphere\r\n{\r\n    vec3 center;\r\n    float radius;\r\n};\r\nstruct Light\r\n{\r\n    int id;\r\n    vec3 position;\r\n    float radius;\r\n    float intensity;\r\n};\r\n\r\nin vec3 initialRay;\r\nout vec4 pixelColor;\r\n\r\n// path tracer settings\r\nuniform vec2 resolution;\r\nuniform vec3 eye;\r\nuniform float textureWeight;\r\nuniform uint hostSeed;\r\nuniform sampler2D accumulatedImage; // #0\r\n\r\n// geometry\r\nuniform int triangleDataTextureSize;\r\nuniform int triangleDataTextureSizePower;\r\nuniform sampler2D triangleDataTexture; // #1\r\n\r\n// lights\r\nuniform int totalLights;\r\nuniform int lightDataTextureSize;\r\nuniform int lightDataTextureSizePower;\r\nuniform sampler2D lightDataTexture; // #2\r\n\r\n// bvh: list of nodes (bounding boxes) with references to children nodes\r\nuniform int bvhDataTextureSize;\r\nuniform int bvhDataTextureSizePower;\r\nuniform sampler2D bvhDataTexture; // #3\r\n\r\n// stack for BVH traversal\r\nint stackPointer;\r\nint stack[STACK_SIZE];\r\n\r\n// texturing\r\nuniform sampler2D materialsTexture; // #4\r\nuniform int materialsTextureSize;\r\nuniform int materialsTextureSizePower;\r\n\r\n// textures for albedo images\r\nuniform sampler2D albedoTexture1; // #5\r\nuniform sampler2D albedoTexture2; // #6\r\nuniform sampler2D albedoTexture3; // #7\r\nuniform sampler2D albedoTexture4; // #8\r\nuniform sampler2D albedoTexture5; // #9\r\nuniform sampler2D albedoTexture6; // #10\r\nuniform sampler2D albedoTexture7; // #11\r\nuniform int albedoTextureSize;\r\nuniform int albedoTextureSizePower;\r\n\r\n// skydome\r\nuniform bool isSkydomeLoaded;\r\nuniform int skydomeTextureSize;\r\nuniform int skydomeTextureSizePower;\r\nuniform float skydomeWidth;\r\nuniform float skydomeHeight;\r\nuniform sampler2D skydomeTexture1; // #12\r\nuniform sampler2D skydomeTexture2; // #13\r\nuniform sampler2D skydomeTexture3; // #14\r\nuniform sampler2D skydomeTexture4; // #15\r\n\r\n// data structures fetching from textures\r\n\r\nvec4 getValueFromTexture(sampler2D texture, int index, int size, int sizePower) {\r\n    ivec2 uv = ivec2(\r\n        index & size - 1,\r\n        index >> sizePower\r\n    );\r\n\t\r\n\treturn texelFetch(texture, uv, 0).rgba;\r\n}\r\n\r\nTriangle fetchTriangle(int id) {\r\n    vec3 coordA = getValueFromTexture(triangleDataTexture, id * 7, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n    vec3 coordB = getValueFromTexture(triangleDataTexture, id * 7 + 1, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n    vec3 coordC = getValueFromTexture(triangleDataTexture, id * 7 + 2, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n    \r\n    vec3 uv1 = getValueFromTexture(triangleDataTexture, id * 7 + 3, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n    vec3 uv2 = getValueFromTexture(triangleDataTexture, id * 7 + 4, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n\r\n    vec3 material = getValueFromTexture(triangleDataTexture, id * 7 + 5, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n    vec3 normal = getValueFromTexture(triangleDataTexture, id * 7 + 6, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n    \r\n    Triangle triangle;\r\n    triangle.a = coordA;\r\n    triangle.b = coordB;\r\n    triangle.c = coordC;\r\n    triangle.uvA = vec2(uv1[0], uv1[1]);\r\n    triangle.uvB = vec2(uv1[2], uv2[0]);\r\n    triangle.uvC = vec2(uv2[1], uv2[2]);\r\n    triangle.materialID = int(material[0]);\r\n    triangle.normal = normal;\r\n\r\n    return triangle;\r\n}\r\n\r\nint fetchTriangleIndex(int id) {\r\n    vec3 triangleIndex = getValueFromTexture(triangleDataTexture, id * 7 + 5, triangleDataTextureSize, triangleDataTextureSizePower).rgb;\r\n\r\n    return int(triangleIndex[1]);\r\n}\r\n\r\nLight fetchLight(int id) {\r\n    vec3 position = getValueFromTexture(lightDataTexture, id * 2, lightDataTextureSize, lightDataTextureSizePower).rgb;\r\n    vec3 featureVector = getValueFromTexture(lightDataTexture, id * 2 + 1, lightDataTextureSize, lightDataTextureSizePower).rgb;\r\n\r\n    float radius = featureVector[0];\r\n    float intensity = featureVector[1];\r\n    \r\n    return Light(id, position, radius, intensity);\r\n}\r\n\r\nBoundingBox fetchBoundingBox(int id) {\r\n    vec3 min = getValueFromTexture(bvhDataTexture, id * 4 + 0, bvhDataTextureSize, bvhDataTextureSizePower).rgb;\r\n    vec3 max = getValueFromTexture(bvhDataTexture, id * 4 + 1, bvhDataTextureSize, bvhDataTextureSizePower).rgb;\r\n    vec3 data = getValueFromTexture(bvhDataTexture, id * 4 + 2, bvhDataTextureSize, bvhDataTextureSizePower).rgb;\r\n    vec3 children = getValueFromTexture(bvhDataTexture, id * 4 + 3, bvhDataTextureSize, bvhDataTextureSizePower).rgb;\r\n\r\n    BoundingBox boundingBox;\r\n    boundingBox.min = min;\r\n    boundingBox.max = max;\r\n    boundingBox.isLeaf = bool(data[0]);\r\n    boundingBox.first = int(data[1]);\r\n    boundingBox.count = int(data[2]);\r\n    boundingBox.left = int(children[0]);\r\n    boundingBox.right = int(children[1]);\r\n    boundingBox.id = int(children[2]);\r\n\r\n    return boundingBox;\r\n}\r\n\r\nMaterial fetchMaterial(int id) {\r\n    vec3 color = getValueFromTexture(materialsTexture, id * 3 + 0, materialsTextureSize, materialsTextureSizePower).rgb;\r\n    vec3 data = getValueFromTexture(materialsTexture, id * 3 + 1, materialsTextureSize, materialsTextureSizePower).rgb;\r\n    vec3 albedoTextureSize = getValueFromTexture(materialsTexture, id * 3 + 2, materialsTextureSize, materialsTextureSizePower).rgb;\r\n\r\n    Material material;\r\n    material.baseColor = color;\r\n    material.hasAlbedoTexture = bool(data[0]);\r\n    material.albedoTextureId = int(data[1]);\r\n    material.albedoPixelOffset = int(data[2]);\r\n\r\n    material.albedoTextureWidth = albedoTextureSize[0];\r\n    material.albedoTextureHeight = albedoTextureSize[1];\r\n    material.hasAlpha = bool(albedoTextureSize[2]);\r\n\r\n    return material;\r\n}\r\n\r\n\r\n// general GL utilities\r\n\r\nvec3 clampColor(vec3 color) {\r\n    float v = max(color.x, max(color.y, color.z));\r\n    if (v > 1.0) {\r\n        color *= 1.0 / v;\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nvec3 safeOrigin(vec3 origin, vec3 direction, vec3 normal) {\r\n\tfloat parallel = 1.0 - abs(dot(normal, direction));\r\n\tfloat v = parallel * parallel;\r\n\r\n\treturn origin + direction * EPSILON * (1.0 - v) + normal * EPSILON * v;\r\n}\r\n\r\n// random numbers generation algorithm from LH2\r\nuint wangHash(uint s) {\r\n    s = (s ^ 61u) ^ (s >> 16u),\r\n    s *= 9u,\r\n    s = s ^ (s >> 4u),\r\n    s *= 0x27d4eb2du,\r\n    s = s ^ (s >> 15u);\r\n    \r\n    return s;\r\n}\r\n\r\nuint unifySeed(uint seed) {\r\n    uint xpos = uint(gl_FragCoord.x * resolution[0]);\r\n    uint ypos = uint(gl_FragCoord.y * resolution[1]);\r\n    uint pixelIdx = xpos + ypos * uint(resolution[0]);\r\n    \r\n    return wangHash(pixelIdx + seed);\r\n}\r\n\r\nuint randomInt(inout uint s) {\r\n    s ^= s << 13u,\r\n    s ^= s >> 17u,\r\n    s ^= s << 5;\r\n    \r\n    return s;\r\n}\r\n\r\nfloat randomFloat(inout uint seed) {\r\n    return float( randomInt(seed) ) * 2.3283064365387e-10;\r\n}\r\n//\r\n\r\n// ToDo: remove. Legacy RNG algorithm. scale: vec3(12.9898, 78.233, 151.7182), vec3(63.7264, 10.873, 623.6736)\r\n// float randomFloat(vec3 scale, float seed) {\r\n//     return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n// }\r\n\r\nvec3 cosineWeightedDirection(uint seed, vec3 normal) {\r\n    uint uSeed = unifySeed(seed);\r\n\r\n    float u = randomFloat(uSeed);\r\n    float v = randomFloat(uSeed);\r\n    float r = sqrt(u);\r\n    float angle = 6.283185307179586 * v;\r\n\r\n    vec3 sdir, tdir;\r\n    if (abs(normal.x) < 0.5) {\r\n        sdir = cross(normal, vec3(1, 0, 0));\r\n    } else {\r\n        sdir = cross(normal, vec3(0, 1, 0));\r\n    }\r\n    tdir = cross(normal, sdir);\r\n\r\n    return normalize(\r\n        r * cos(angle) * sdir + r * sin(angle) * tdir + sqrt(1.0 - u) * normal\r\n    );\r\n}\r\n\r\nfloat intersectTriangle(Ray ray, Triangle triangle) {\r\n    float t, u, v;\r\n\r\n    vec3 ab = triangle.b - triangle.a;\r\n    vec3 ac = triangle.c - triangle.a;\r\n    vec3 pvec = cross(ray.direction, ac);\r\n    float det = dot(ab, pvec);\r\n\r\n    float invDet = 1.0 / det;\r\n\r\n    vec3 tvec = ray.origin - triangle.a;\r\n    u = dot(tvec, pvec) * invDet;\r\n\r\n    if (u < 0.0 || u > 1.0) return INFINITY;\r\n\r\n    vec3 qvec = cross(tvec, ab);\r\n    v = dot(ray.direction, qvec) * invDet;\r\n    if (v < 0.0 || u + v > 1.0) return INFINITY;\r\n\r\n    t = dot(ac, qvec) * invDet;\r\n    if (t >= EPSILON)\r\n    {\r\n        return t;\r\n    }\r\n\r\n    return INFINITY;\r\n}\r\n\r\n// vec3 getTriangleNormal(Triangle triangle) {\r\n//     return normalize(\r\n//         cross(triangle.a - triangle.b, triangle.b - triangle.c)\r\n//     );\r\n// }\r\n\r\nbool isIntersectingBoundingBox(Ray invertedRay, BoundingBox boundingBox, out float t) {\r\n    float tmin, tmax, txmin, txmax, tymin, tymax, tzmin, tzmax;\r\n\r\n    txmin = (boundingBox.min.x - invertedRay.origin.x) * invertedRay.direction.x;\r\n    txmax = (boundingBox.max.x - invertedRay.origin.x) * invertedRay.direction.x;\r\n\r\n    tymin = (boundingBox.min.y - invertedRay.origin.y) * invertedRay.direction.y;\r\n    tymax = (boundingBox.max.y - invertedRay.origin.y) * invertedRay.direction.y;\r\n\r\n    tzmin = (boundingBox.min.z - invertedRay.origin.z) * invertedRay.direction.z;\r\n    tzmax = (boundingBox.max.z - invertedRay.origin.z) * invertedRay.direction.z;\r\n\r\n    tmin = min(txmin, txmax);\r\n    tmax = max(txmin, txmax);\r\n\r\n    tmin = max(tmin, min(tymin, tymax));\r\n    tmax = min(tmax, max(tymin, tymax));\r\n\r\n    tmin = max(tmin, min(tzmin, tzmax));\r\n    tmax = min(tmax, max(tzmin, tzmax));\r\n\r\n    // early out if intersection is further than the last one\r\n    if (tmin > invertedRay.t)\r\n        return false;\r\n\r\n    if (tmax >= EPSILON && tmax >= tmin) {\r\n        t = tmin;\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfloat intersectSphere(Ray ray, Sphere sphere) {\r\n    vec3 toSphere = ray.origin - sphere.center;\r\n    float a = dot(ray.direction, ray.direction);\r\n    float b = 2.0 * dot(toSphere, ray.direction);\r\n    float c = dot(toSphere, toSphere) - sphere.radius * sphere.radius;\r\n    float discriminant = b * b - 4.0 * a * c;\r\n\r\n    if (discriminant > 0.0) {\r\n        float t = (-b - sqrt(discriminant)) / (2.0 * a);\r\n        if (t >= EPSILON) return t;\r\n    }\r\n\r\n    return INFINITY;\r\n}\r\n\r\nvec3 calculateBarycentricCoordinates(Triangle triangle, vec3 hit) {\r\n    vec3 v0 = triangle.b - triangle.a;\r\n    vec3 v1 = triangle.c - triangle.a;\r\n    vec3 v2 = hit - triangle.a;\r\n\r\n    float d00 = dot(v0, v0);\r\n    float d01 = dot(v0, v1);\r\n    float d11 = dot(v1, v1);\r\n    float d20 = dot(v2, v0);\r\n    float d21 = dot(v2, v1);\r\n\r\n    float denom = d00 * d11 - d01 * d01;\r\n\r\n    float v = (d11 * d20 - d01 * d21) / denom;\r\n    float w = (d00 * d21 - d01 * d20) / denom;\r\n    float u = 1.0 - v - w;\r\n\r\n    return vec3(u, v, w);\r\n}\r\n\r\nvec2 calculateUV(Triangle triangle, vec3 hit) {\r\n    vec3 barycentricCoord = calculateBarycentricCoordinates(triangle, hit);\r\n    vec2 uv = barycentricCoord[0] * triangle.uvA + barycentricCoord[1] * triangle.uvB + barycentricCoord[2] * triangle.uvC;\r\n\r\n    // filtering: repeat\r\n    float u = mod(uv[0], 1.0);\r\n    float v = mod(uv[1], 1.0);\r\n\r\n    // filtering: nearest\r\n    // float u = clamp(u, 0.0, 1.0);\r\n    // float v = clamp(v, 0.0, 1.0);\r\n\r\n    return vec2(u, v);\r\n}\r\n\r\nvec4 mapTexture(Triangle triangle, Material material, vec2 uv) {\r\n    vec4 color = vec4(0.15, 0.15, 0.15, 1.0);\r\n\r\n    // multiple images per GL texture\r\n    float x = floor((uv[0] * material.albedoTextureWidth));\r\n    float y = floor((uv[1] * material.albedoTextureHeight));\r\n    int pixelId = int(x + y * material.albedoTextureWidth);\r\n\r\n    if (material.albedoTextureId == 0) {\r\n        color = getValueFromTexture(albedoTexture1, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    } else if (material.albedoTextureId == 1) {\r\n        color = getValueFromTexture(albedoTexture2, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    } else if (material.albedoTextureId == 2) {\r\n        color = getValueFromTexture(albedoTexture3, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    } else if (material.albedoTextureId == 3) {\r\n        color = getValueFromTexture(albedoTexture4, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    } else if (material.albedoTextureId == 4) {\r\n        color = getValueFromTexture(albedoTexture5, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    } else if (material.albedoTextureId == 5) {\r\n        color = getValueFromTexture(albedoTexture6, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    } else if (material.albedoTextureId == 6) {\r\n        color = getValueFromTexture(albedoTexture7, pixelId + material.albedoPixelOffset, albedoTextureSize, albedoTextureSizePower);\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\nBoundingBox pop() {\r\n    stackPointer = stackPointer - 1;\r\n\r\n    return fetchBoundingBox(stack[stackPointer]);\r\n}\r\n\r\nvoid push(int node) {\r\n    stack[stackPointer] = node;\r\n    stackPointer = stackPointer + 1;\r\n}\r\n\r\nIntersection intersectPrimitives(Ray ray, bool isShadowRay) {\r\n    Intersection intersection;\r\n    intersection.t = INFINITY;\r\n\r\n    Ray invertedRay;\r\n    invertedRay.origin = ray.origin;\r\n    invertedRay.direction = vec3(1.0 / ray.direction.x, 1.0 / ray.direction.y, 1.0 / ray.direction.z);\r\n    invertedRay.t = intersection.t;\r\n\r\n    float tmin;\r\n    stackPointer = 0;\r\n    BoundingBox node = fetchBoundingBox(0); // BVH root node\r\n\r\n    if (isIntersectingBoundingBox(invertedRay, node, tmin)) {\r\n        while (true) {\r\n\r\n            // DEBUG: visualize each bounding box\r\n            // if (true) {\r\n            //     pixelColor = pixelColor + vec4(0.05, 00, 0.0, 1.0);\r\n            // }\r\n\r\n            if (node.isLeaf) {\r\n                // DEBUG: visualize leaf bounding boxes\r\n                // if (true) {\r\n                //     pixelColor = pixelColor + vec4(0.0, 0.1, 0.0, 1.0);\r\n                // }\r\n\r\n                for (int i = 0; i < node.count; i++) {\r\n                    int index = fetchTriangleIndex(node.first + i);\r\n\r\n                    Triangle triangle = fetchTriangle(index);\r\n                    float tTriangle = intersectTriangle(ray, triangle);\r\n\r\n                    if (tTriangle < intersection.t) {\r\n                        vec3 hit = ray.origin + ray.direction * tTriangle;\r\n                        vec2 uv = vec2(0.0);\r\n                        Material material = fetchMaterial(triangle.materialID);\r\n\r\n                        if (material.hasAlbedoTexture) {\r\n                            uv = calculateUV(triangle, hit);\r\n\r\n                            // ignore intersection if alpha pixel was hit\r\n                            if (material.hasAlpha) {\r\n                                vec4 textureColor = mapTexture(triangle, material, uv);\r\n                                if (textureColor[3] <= EPSILON) {\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n                        intersection.t = tTriangle;\r\n\r\n                        // early out if shadowRay already hit any primitive\r\n                        if (isShadowRay && tTriangle < ray.t) {\r\n                            stackPointer = 0;\r\n                        }\r\n                        \r\n                        intersection.hit = hit;\r\n                        intersection.uv = uv;\r\n                        intersection.triangle = triangle;\r\n                        intersection.material = material;\r\n\r\n                        invertedRay.t = intersection.t;\r\n                    }\r\n                }\r\n            } else {\r\n                // determine which child to traverse first\r\n                BoundingBox leftChild = fetchBoundingBox(node.left);\r\n                BoundingBox rightChild = fetchBoundingBox(node.right);\r\n\r\n                float tLeft = 0.0, tRight = 0.0;\r\n                bool hitLeft = isIntersectingBoundingBox(invertedRay, leftChild, tLeft);\r\n                bool hitRight = isIntersectingBoundingBox(invertedRay, rightChild, tRight);\r\n\r\n                if (hitLeft && !hitRight) {\r\n                    node = leftChild;\r\n                    continue;\r\n                } else if (hitRight && !hitLeft) {\r\n                    node = rightChild;\r\n                    continue;\r\n                } else if (hitLeft && hitRight) {\r\n                    if (tRight >= tLeft) {\r\n                        push(node.right);\r\n                        node = leftChild;\r\n                        continue;\r\n                    }\r\n\r\n                    push(node.left);\r\n                    node = rightChild;\r\n                    continue;\r\n                }\r\n            }\r\n            \r\n            if (stackPointer <= 0 || stackPointer > STACK_SIZE) {\r\n                break;\r\n            }\r\n            node = pop();\r\n        }\r\n    }\r\n\r\n    return intersection;\r\n}\r\n\r\nbool isOccluded(Ray ray) {\r\n    Intersection intersection = intersectPrimitives(ray, true);\r\n\r\n    if (intersection.t < ray.t) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvec3 sampleSkydome(Ray ray) {\r\n    vec3 color = vec3(0.25);\r\n    float u = mod(0.5 * (1.0 + atan(ray.direction.z, -ray.direction.x) * INVERSE_PI), 1.0);\r\n    float v = acos(ray.direction.y) * INVERSE_PI;\r\n\r\n    float pixelId = floor(u * skydomeWidth) + floor(v * skydomeHeight) * skydomeWidth;\r\n    float size = float(skydomeTextureSize * skydomeTextureSize);\r\n    \r\n    float textureId = floor(pixelId / size);\r\n    float offset = mod(pixelId, size);\r\n\r\n    if (abs(textureId - 0.0) <= EPSILON) {\r\n        color = getValueFromTexture(skydomeTexture1, int(offset), skydomeTextureSize, skydomeTextureSizePower).rgb;\r\n    } else if (abs(textureId - 1.0) <= EPSILON) {\r\n        color = getValueFromTexture(skydomeTexture2, int(offset), skydomeTextureSize, skydomeTextureSizePower).rgb;\r\n    } else if (abs(textureId - 2.0) <= EPSILON) {\r\n        color = getValueFromTexture(skydomeTexture3, int(offset), skydomeTextureSize, skydomeTextureSizePower).rgb;\r\n    } else if (abs(textureId - 3.0) <= EPSILON) {\r\n        color = getValueFromTexture(skydomeTexture4, int(offset), skydomeTextureSize, skydomeTextureSizePower).rgb;\r\n    }\r\n\r\n    return color;\r\n}\r\n\r\n// MIS\r\nfloat potentialLightContribution(Light light, vec3 hit, vec3 normal) {\r\n    vec3 L = light.position - hit;\r\n    float NdotL = max(0.0, dot( normal, L ) );\r\n    float att = 1.0 / dot( L, L );\r\n    \r\n    return NdotL * att;\r\n}\r\n\r\nfloat[SMALL_STACK_SIZE] calculateLightPotentials(vec3 hit, vec3 normal, out float totalPotential) {\r\n    float potentials[SMALL_STACK_SIZE];\r\n\r\n    for (int i = 0; i < totalLights; i++) {\r\n        float c = potentialLightContribution(fetchLight(i), hit, normal);\r\n        totalPotential += c;\r\n        potentials[i] = c;\r\n    }\r\n\r\n    return potentials;\r\n}\r\n\r\nfloat lightPickProbability(int lightID, float potentials[SMALL_STACK_SIZE], float totalPotential) {\r\n    float lightPickProb = 0.0;\r\n\r\n    if (totalPotential <= 0.0) {\r\n        lightPickProb = 0.0;\r\n    } else {\r\n        lightPickProb = potentials[lightID] / totalPotential;\r\n    }\r\n\r\n    return lightPickProb;\r\n}\r\n\r\nLight pickPotentialLight(float potentials[SMALL_STACK_SIZE], float totalPotential) {\r\n    float sum = 0.0;\r\n    uint uSeed = unifySeed(hostSeed);\r\n    float r = totalPotential * randomFloat(uSeed);\r\n\tfor (int i = 0; i < totalLights; i++) {\r\n\t\tsum += potentials[i];\r\n\t\tif (sum >= r) {\r\n            return fetchLight(i);\r\n        }\r\n\t}\r\n\r\n    return fetchLight(0);\r\n}\r\n//\r\n\r\nvec3 calculateColor(Ray ray) {\r\n    vec3 accumulatedColor = vec3(0.0);\r\n    vec3 surfaceColor = vec3(0.15);\r\n    vec3 lightColor = vec3(1.0, 1.0, 0.85);\r\n    vec3 throughput = vec3(1.0);\r\n    vec3 lastNormal = vec3(0.0);\r\n    float bsdfPdf = 1.0;\r\n\r\n    for (int bounce = 0; bounce < BOUNCES; bounce++) {\r\n        float t = INFINITY;\r\n        vec3 hit, normal;\r\n\r\n        // ray-primitive intersection\r\n        Intersection intersection = intersectPrimitives(ray, false);\r\n        if (intersection.t < t) {\r\n            t = intersection.t;\r\n            hit = intersection.hit;\r\n            normal = intersection.triangle.normal;//getTriangleNormal(intersection.triangle);\r\n\r\n            if (intersection.material.hasAlbedoTexture) {\r\n                surfaceColor = mapTexture(intersection.triangle, intersection.material, intersection.uv).rgb;// * intersection.material.baseColor;\r\n            } else {\r\n                surfaceColor = intersection.material.baseColor;\r\n            }\r\n        }\r\n\r\n        // ray-light intersection\r\n        float tLight = INFINITY;\r\n        for (int i = 0; i < totalLights; i++) {\r\n            Light light = fetchLight(i);\r\n            tLight = intersectSphere(ray, Sphere(light.position, light.radius));\r\n            \r\n            // light-hit: apply MIS\r\n            if (tLight < t) {\r\n                vec3 lightNormal = hit - light.position; // LH2: N\r\n                float DdotNL = -dot(ray.direction, lightNormal);\r\n\r\n                // if (DdotNL > 0.0) { /* double sided check is irrelevant for spherical lights */\r\n                    float lightArea = 4.0 * PI * light.radius * light.radius;\r\n                    float lightPdf = (tLight * tLight) / (DdotNL * lightArea);\r\n\r\n                    float totalPotential = 0.0;\r\n                    float[] potentials = calculateLightPotentials(hit, lastNormal, totalPotential);\r\n                    float lightPickProb = lightPickProbability(i, potentials, totalPotential);\r\n\r\n                    vec3 contribution;\r\n                    if ((bsdfPdf + lightPdf * lightPickProb) > 0.0) {\r\n                        contribution = throughput * lightColor * (1.0 / (bsdfPdf + lightPdf * lightPickProb));\r\n                    } else {\r\n                        contribution = throughput * lightColor * (1.0 / (bsdfPdf + lightPdf));\r\n                    }\r\n\r\n                    accumulatedColor += clampColor(contribution);\r\n                // }\r\n                break;\r\n            }\r\n        }\r\n        \r\n        // no-hit: sample skydome if loaded\r\n        if (abs(t - INFINITY) <= EPSILON) {\r\n            if (isSkydomeLoaded) {\r\n                accumulatedColor += clampColor(throughput * sampleSkydome(ray) * (1.0 / bsdfPdf));\r\n            }\r\n            break;\r\n        }\r\n\r\n        // apply postponed bsdf pdf\r\n        throughput *= 1.0 / bsdfPdf;\r\n\r\n        // primitive-hit: apply NEE\r\n        float totalPotential = 0.0;\r\n        float[] potentials = calculateLightPotentials(hit, normal, totalPotential);\r\n        Light light = pickPotentialLight(potentials, totalPotential);\r\n        \r\n\t\tvec3 L = hit - light.position;\r\n\t\tfloat lightPdf = dot(L, normal) < 0.0 ? dot(L, L) : 0.0;\r\n        float lightPickProb = lightPickProbability(light.id, potentials, totalPotential);\r\n\r\n        L = light.position - hit;\r\n        float dist = length(L);\r\n        L *= 1.0 / dist;\r\n        float NdotL = dot(L, normal);\r\n        if (NdotL > 0.0 && lightPdf > 0.0) {\r\n\t\t\tfloat pdf = abs(NdotL) * INVERSE_PI;\r\n\t\t\tif (pdf > 0.0) {\r\n\t\t\t\tvec3 contribution = throughput * surfaceColor * INVERSE_PI * lightColor * light.intensity * NdotL / (lightPickProb * lightPdf + pdf);\r\n\r\n                Ray shadowRay = Ray(safeOrigin(hit, L, normal), L, dist);\r\n                if (!isOccluded(shadowRay)) {\r\n                    accumulatedColor += clampColor(contribution);\r\n                }\r\n\t\t\t}\r\n\t\t}\r\n\r\n        // shoot a new ray\r\n        ray.direction = cosineWeightedDirection(hostSeed + uint(bounce), normal);\r\n        ray.origin = safeOrigin(hit, ray.direction, normal);\r\n\r\n        // calculate new bsdf & adjust throughput\r\n        float theta = dot(ray.direction, normal);\r\n        if (theta < EPSILON) {\r\n            break;\r\n        }\r\n        bsdfPdf = max(0.0, theta) * INVERSE_PI;\r\n        throughput = throughput * surfaceColor * INVERSE_PI;\r\n        lastNormal = normal;\r\n    }\r\n    \r\n    return clampColor(accumulatedColor);\r\n}\r\n\r\nvoid main() {\r\n    Ray ray;\r\n    ray.origin = eye;\r\n    ray.direction = normalize(initialRay);\r\n\r\n    vec3 accumulatedColor = texture(accumulatedImage, gl_FragCoord.xy / resolution).rgb;\r\n    pixelColor = vec4(\r\n        mix(\r\n            calculateColor(ray),\r\n            accumulatedColor,\r\n            textureWeight\r\n        ),\r\n        1.0\r\n    );\r\n\r\n    // DEBUG mode\r\n    // vec4(mix(calculateColor(eye, initialRay), color, textureWeight), 1.0);\r\n}"},function(t,e){t.exports="#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\n\r\nin vec3 vertex;\r\nout vec2 texCoord;\r\n\r\nvoid main() {\r\n    texCoord = vertex.xy * 0.5 + 0.5;\r\n    gl_Position = vec4(vertex, 1.0);\r\n}"},function(t,e){t.exports="#version 300 es\r\n\r\nprecision highp float;\r\nprecision highp int;\r\nprecision highp sampler2D;\r\n\r\nin vec2 texCoord;\r\nuniform sampler2D textureSampler;\r\n\r\nout vec4 pixelColor;\r\nvoid main() {\r\n    pixelColor = texture(textureSampler, texCoord);\r\n}"},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,u)}s((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(16),o=n(0),u=n(17),s=n(18),c=n(22),l=n(2),d=n(4),f=function(){function t(){}return t.createPicaRoomScene=function(t){return r(this,void 0,void 0,(function(){var e,n,r,l,d,f;return i(this,(function(i){switch(i.label){case 0:return e=[new a.Light(o.vec3.fromValues(12.5,27.5,.5),.25,1500)],n=new u.Camera(t,o.vec3.fromValues(-1.05,27.05,42.5),-.35,-3.15,.5),[4,s.GeometryLoader.loadGltf("assets/models/pica-room/","scene.gltf",0)];case 1:return r=i.sent(),(l=new c.Scene(n)).setLights(e),l.setTriangles(r[0]),l.setMaterials(r[1]),f=(d=l).setSkydome,[4,s.GeometryLoader.parseHDR("assets/skydome/equi.hdr")];case 2:return f.apply(d,[i.sent()]),[2,l]}}))}))},t.createSponzaScene=function(t){return r(this,void 0,void 0,(function(){var e,n,r,l,d,f;return i(this,(function(i){switch(i.label){case 0:return e=[new a.Light(o.vec3.fromValues(825,550,305),2.5,25e4),new a.Light(o.vec3.fromValues(825,310,372),2.5,25e4),new a.Light(o.vec3.fromValues(0,50,0),2.5,25e4),new a.Light(o.vec3.fromValues(0,550,0),2.5,25e4)],n=new u.Camera(t,o.vec3.fromValues(462,350,0),.01,-1.6,10),[4,s.GeometryLoader.loadGltf("assets/models/sponza/","Sponza.gltf",0)];case 1:return r=i.sent(),(l=new c.Scene(n)).setLights(e),l.setTriangles(r[0]),l.setMaterials(r[1]),f=(d=l).setSkydome,[4,s.GeometryLoader.parseHDR("assets/skydome/sky1.hdr")];case 2:return f.apply(d,[i.sent()]),[2,l]}}))}))},t.createAvocadoScene=function(t){return r(this,void 0,void 0,(function(){var e,n,r,l;return i(this,(function(i){switch(i.label){case 0:return e=[new a.Light(o.vec3.fromValues(-.5,2.75,12.5),.25,200),new a.Light(o.vec3.fromValues(2.25,12.75,.25),1.5,200),new a.Light(o.vec3.fromValues(-2.25,2.75,-10.75),.15,250)],n=new u.Camera(t,o.vec3.fromValues(-2,1.5,-12.5),.1,.35,.25),[4,s.GeometryLoader.loadGltf("assets/models/avocado/","Avocado.gltf",0,100)];case 1:return r=i.sent(),(l=new c.Scene(n)).setLights(e),l.setTriangles(r[0]),l.setMaterials(r[1]),[4,s.GeometryLoader.loadGltf("assets/models/avocado/","Avocado.gltf",l.getMaterials().length,100,o.vec3.fromValues(6,0,0))];case 2:return r=i.sent(),l.addTriangles(r[0]),l.addMaterials(r[1]),[2,l]}}))}))},t.createSuzanneScene=function(t){return r(this,void 0,void 0,(function(){var e,n,r,l,d,f;return i(this,(function(i){switch(i.label){case 0:return e=[new a.Light(o.vec3.fromValues(-2.25,2.75,.25),.15,7.5),new a.Light(o.vec3.fromValues(4.5,3.85,1.75),.25,15)],n=new u.Camera(t,o.vec3.fromValues(1.75,.9,3.85),-.15,3.5,.1),[4,s.GeometryLoader.loadGltf("assets/models/suzanne/","Suzanne.gltf",0)];case 1:return r=i.sent(),(l=new c.Scene(n)).setLights(e),l.setTriangles(r[0]),l.setMaterials(r[1]),f=(d=l).setSkydome,[4,s.GeometryLoader.parseHDR("assets/skydome/space.hdr")];case 2:return f.apply(d,[i.sent()]),[2,l]}}))}))},t.createDuckScene=function(t){return r(this,void 0,void 0,(function(){var e,n,r,l,d,f;return i(this,(function(i){switch(i.label){case 0:return e=[new a.Light(o.vec3.fromValues(0,5.75,200.25),.25,3),new a.Light(o.vec3.fromValues(200.25,22.75,-20.25),1.5,1),new a.Light(o.vec3.fromValues(-20.25,200.75,.25),.15,1)],n=new u.Camera(t,o.vec3.fromValues(215,70,205),.01,3.85,5),[4,s.GeometryLoader.loadGltf("assets/models/duck/","Duck.gltf",0)];case 1:return r=i.sent(),(l=new c.Scene(n)).setLights(e),l.setTriangles(r[0]),l.setMaterials(r[1]),f=(d=l).setSkydome,[4,s.GeometryLoader.parseHDR("assets/skydome/LH/sky2.hdr")];case 2:return f.apply(d,[i.sent()]),[2,l]}}))}))},t.createBasicScene=function(t){return r(this,void 0,void 0,(function(){var e,n,r,s;return i(this,(function(i){return e=[new a.Light(o.vec3.fromValues(0,1.75,.25),.25,12.5)],n=new u.Camera(t),r=new d.Material(0),(s=new c.Scene(n)).setLights(e),s.setTriangles([new l.Triangle(o.vec3.fromValues(-.75,-.95,-.75),o.vec3.fromValues(.75,-.95,.75),o.vec3.fromValues(.75,-.95,-.75),r),new l.Triangle(o.vec3.fromValues(-.75,-.95,-.75),o.vec3.fromValues(-.75,-.95,.75),o.vec3.fromValues(.75,-.95,.75),r),new l.Triangle(o.vec3.fromValues(-.75,-.95,-.75),o.vec3.fromValues(-.75,.95,.75),o.vec3.fromValues(-.75,-.95,.75),r),new l.Triangle(o.vec3.fromValues(-.75,-.95,-.75),o.vec3.fromValues(-.75,.95,-.75),o.vec3.fromValues(-.75,.95,.75),r),new l.Triangle(o.vec3.fromValues(-.75,-.95,-.75),o.vec3.fromValues(.75,-.95,-.75),o.vec3.fromValues(-.75,.95,-.75),r),new l.Triangle(o.vec3.fromValues(.75,-.95,-.75),o.vec3.fromValues(.75,.95,-.75),o.vec3.fromValues(-.75,.95,-.75),r)]),s.setMaterials([r]),[2,s]}))}))},t}();e.SceneFactory=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n){this.position=t,this.radius=e,this.intensity=n}return t.prototype.getPosition=function(){return this.position},t.prototype.getRadius=function(){return this.radius},t.prototype.getIntensity=function(){return this.intensity},t}();e.Light=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t,e,n,i,a,o){void 0===e&&(e=r.vec3.fromValues(0,0,2.5)),void 0===n&&(n=0),void 0===i&&(i=3.15),void 0===a&&(a=.1),void 0===o&&(o=.05),this.canvas=t,this.position=e,this.angleX=n,this.angleY=i,this.fieldOfView=Math.PI/3,this.frontDirection=r.vec3.fromValues(0,0,-1),this.upDirection=r.vec3.fromValues(0,1,0),this.movementSpeed=a,this.rotationSpeed=o,this.zoomSpeed=.01,this.calculateViewProjection()}return t.prototype.getPosition=function(){return this.position},t.prototype.calculateViewProjection=function(){this.frontDirection[0]=Math.sin(this.angleY)*Math.cos(this.angleX),this.frontDirection[1]=Math.sin(this.angleX),this.frontDirection[2]=Math.cos(this.angleY)*Math.cos(this.angleX);var t=r.mat4.lookAt(r.mat4.create(),this.position,r.vec3.add(r.vec3.create(),this.position,this.frontDirection),this.upDirection),e=r.mat4.perspective(r.mat4.create(),this.fieldOfView,this.canvas.width/this.canvas.height,.1,1e3);this.viewProjectionMatrix=r.mat4.invert(r.mat4.create(),r.mat4.multiply(r.mat4.create(),e,t)),console.log("Camera configuration\nposition: "+this.position+"\nfront direction: "+this.frontDirection+"\nup direction: "+this.upDirection+"\nangle X: "+this.angleX+", Y: "+this.angleY+"\nFOV: "+this.fieldOfView)},t.prototype.getRay=function(t,e){var n=[(2*Math.random()-1)/this.canvas.width,(2*Math.random()-1)/this.canvas.height,0],i=r.mat4.translate(r.mat4.create(),this.viewProjectionMatrix,n),a=r.vec4.transformMat4(r.vec4.create(),[t,e,0,1],i),o=r.vec4.scale(r.vec4.create(),a,1/a[3]);return r.vec3.subtract(r.vec3.create(),[o[0],o[1],o[2]],this.position)},t.prototype.moveUp=function(){this.position=r.vec3.add(r.vec3.create(),this.position,r.vec3.scale(r.vec3.create(),this.frontDirection,this.movementSpeed))},t.prototype.moveDown=function(){this.position=r.vec3.sub(r.vec3.create(),this.position,r.vec3.scale(r.vec3.create(),this.frontDirection,this.movementSpeed))},t.prototype.moveRight=function(){this.position=r.vec3.add(r.vec3.create(),this.position,r.vec3.scale(r.vec3.create(),r.vec3.normalize(r.vec3.create(),r.vec3.cross(r.vec3.create(),this.frontDirection,this.upDirection)),this.movementSpeed))},t.prototype.moveLeft=function(){this.position=r.vec3.sub(r.vec3.create(),this.position,r.vec3.scale(r.vec3.create(),r.vec3.normalize(r.vec3.create(),r.vec3.cross(r.vec3.create(),this.frontDirection,this.upDirection)),this.movementSpeed))},t.prototype.zoomIn=function(){this.fieldOfView-=this.zoomSpeed},t.prototype.zoomOut=function(){this.fieldOfView+=this.zoomSpeed},t.prototype.rotateUp=function(){this.angleX+=this.rotationSpeed},t.prototype.rotateDown=function(){this.angleX-=this.rotationSpeed},t.prototype.rotateRight=function(){this.angleY-=this.rotationSpeed},t.prototype.rotateLeft=function(){this.angleY+=this.rotationSpeed},t}();e.Camera=i},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,u)}s((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=e.call(t,o)}catch(t){a=[6,t],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=n(19),o=n(0),u=n(2),s=n(4),c=n(20),l=n(21),d={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},f=function(){function t(){}return t.loadImage=function(t){return r(this,void 0,void 0,(function(){return i(this,(function(e){return[2,new Promise((function(e,n){var r=new Image;r.onload=function(){return e(r)},r.onerror=n,r.src=t}))]}))}))},t.parseHDR=function(t){return r(this,void 0,void 0,(function(){var e,n;return i(this,(function(r){switch(r.label){case 0:return n=l,[4,this.loadSkydome(t)];case 1:return e=n.apply(void 0,[r.sent()]),[2,new c.Texture(e.data,e.shape[0],e.shape[1])]}}))}))},t.loadSkydome=function(t){return r(this,void 0,void 0,(function(){return i(this,(function(e){return[2,new Promise((function(e){var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=function(){return e(n.response)},n.send(null)}))]}))}))},t.loadImageData=function(t){return r(this,void 0,void 0,(function(){var e,n,r,a,o,u;return i(this,(function(i){switch(i.label){case 0:return e=new Float32Array(t.width*t.height*4),(n=document.createElement("canvas")).width=t.width,n.height=t.height,[4,(r=n.getContext("2d")).drawImage(t,0,0)];case 1:for(i.sent(),a=r.getImageData(0,0,n.width,n.height).data,o=!1,u=0;u<e.length/4;u++)e[4*u+0]=a[4*u+0]/255,e[4*u+1]=a[4*u+1]/255,e[4*u+2]=a[4*u+2]/255,e[4*u+3]=a[4*u+3]/255,e[4*u+3]<1&&(o=!0);return[2,[e,o]]}}))}))},t.loadGltf=function(t,e,n,l,d){return void 0===l&&(l=1),void 0===d&&(d=o.vec3.fromValues(0,0,0)),r(this,void 0,void 0,(function(){var r,f,h,m,g,v,p,y,b,T,x,M,E,w,S,L,I,R,A,B,P,D,_,U,C,F,z,O,V,N,k,q,G,X,j;return i(this,(function(i){switch(i.label){case 0:return[4,(new a.GltfLoader).load(t+e)];case 1:r=i.sent(),f=[],h=[],k=0,i.label=2;case 2:return k<r.gltf.materials.length?(F=new s.Material(n+k),null==(m=r.gltf.materials[k].pbrMetallicRoughness.baseColorTexture)?[3,5]:(g=r.gltf.textures[m.index],v=t+r.gltf.images[g.source].uri,[4,this.loadImage(v)])):[3,7];case 3:return p=i.sent(),[4,this.loadImageData(p)];case 4:y=i.sent(),F.setAlbedoTexture(new c.Texture(y[0],p.width,p.height),y[1]),i.label=5;case 5:null!=(b=r.gltf.materials[k].pbrMetallicRoughness.baseColorFactor)?F.setColor(o.vec3.fromValues(b[0],b[1],b[2])):F.setColor(o.vec3.fromValues(1,1,1)),h.push(F),i.label=6;case 6:return k++,[3,2];case 7:T=0,i.label=8;case 8:if(!(T<r.gltf.meshes.length))return[3,17];x=0,i.label=9;case 9:return x<r.gltf.meshes[T].primitives.length?4!=(M=r.gltf.meshes[T].primitives[x].mode)&&null!=M?(console.log("Geometry rendering mode is not triangular! Cannot read GLTF file with mode: ",M),[2,[[],[]]]):(E=r.gltf.meshes[T].primitives[x].attributes.POSITION,w=r.gltf.accessors[E],[4,r.accessorData(E)]):[3,16];case 10:for(S=i.sent(),L=this.loadTypedArray(S.buffer,r.gltf.accessors[E],r.gltf.bufferViews[w.bufferView]),I=[],k=0;k<w.count;k++)R=o.vec3.fromValues(L[3*k+0]*l+d[0],L[3*k+1]*l+d[1],L[3*k+2]*l+d[2]),I.push(R);return A=[],null==(B=r.gltf.meshes[T].primitives[x].attributes.TEXCOORD_0)?[3,12]:(P=r.gltf.accessors[B],[4,r.accessorData(B)]);case 11:for(D=i.sent(),_=this.loadTypedArray(D.buffer,r.gltf.accessors[B],r.gltf.bufferViews[P.bufferView]),k=0;k<P.count;k++)U=o.vec2.fromValues(_[2*k+0],_[2*k+1]),A.push(U);i.label=12;case 12:return C=r.gltf.meshes[T].primitives[x].material,F=h[C],null==(z=r.gltf.meshes[T].primitives[x].indices)?[3,14]:[4,r.accessorData(z)];case 13:for(O=i.sent(),V=r.gltf.accessors[z],N=this.loadTypedArray(O.buffer,r.gltf.accessors[z],r.gltf.bufferViews[V.bufferView]),k=0;k<N.length/3;k++)q=I[N[3*k+0]],G=I[N[3*k+1]],X=I[N[3*k+2]],j=new u.Triangle(q,G,X,F),null!=B&&(j.setUvA(A[N[3*k+0]]),j.setUvB(A[N[3*k+1]]),j.setUvC(A[N[3*k+2]])),f.push(j);return[3,15];case 14:return console.log("Cannot read non-indexed geometry!"),[2,[[],[]]];case 15:return x++,[3,9];case 16:return T++,[3,8];case 17:return[2,[f,h]]}}))}))},t.loadTypedArray=function(t,e,n){var r=[],i=0,a=0;return i=null!=e.byteOffset?e.byteOffset:0,null!=n.byteOffset?a=n.byteOffset:i=0,5126==e.componentType?r=new Float32Array(t,i+a,e.count*d[e.type]):5125==e.componentType?r=new Uint32Array(t,i+a,e.count*d[e.type]):5123==e.componentType?r=new Uint16Array(t,i+a,e.count*d[e.type]):5122==e.componentType?r=new Int16Array(t,i+a,e.count*d[e.type]):5121==e.componentType?r=new Uint8Array(t,i+a,e.count*d[e.type]):5120==e.componentType?r=new Int8Array(t,i+a,e.count*d[e.type]):console.log("GLTF accessor component type cannot be read: "+e.componentType),r},t}();e.GeometryLoader=f},function(t,e){t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=7)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LoadingManager=class{constructor(){this.urlModifier=void 0,this.onStart=void 0,this.onProgress=void 0,this.onLoad=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0}itemStart(t){this.itemsTotal++,!this.isLoading&&this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0}itemEnd(t){this.itemsLoaded++,this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,this.onLoad&&this.onLoad())}itemError(t){this.onError&&this.onError(t)}resolveURL(t){return this.urlModifier?this.urlModifier(t):t}}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,u)}s((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const i=n(3),a=n(0);e.GLTF_COMPONENT_TYPE_ARRAYS={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},e.GLTF_ELEMENTS_PER_TYPE={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},e.GltfAsset=class{constructor(t,e,n,r=new a.LoadingManager){this.gltf=t,this.glbData=n,this.bufferData=new o(this,e,r),this.imageData=new u(this,e,r)}bufferViewData(t){return r(this,void 0,void 0,(function*(){if(!this.gltf.bufferViews)throw new Error("No buffer views found.");const e=this.gltf.bufferViews[t],n=yield this.bufferData.get(e.buffer),r=e.byteLength||0,i=e.byteOffset||0,a=n.buffer,o=n.byteOffset;return new Uint8Array(a,o+i,r)}))}accessorData(t){return r(this,void 0,void 0,(function*(){if(!this.gltf.accessors)throw new Error("No accessors views found.");const n=this.gltf.accessors[t],r=e.GLTF_ELEMENTS_PER_TYPE[n.type];let i;if(void 0!==n.bufferView)i=yield this.bufferViewData(n.bufferView);else{const t=e.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType].BYTES_PER_ELEMENT*r*n.count;i=new Uint8Array(t)}if(n.sparse){const{count:t,indices:a,values:o}=n.sparse;let u=e.GLTF_COMPONENT_TYPE_ARRAYS[a.componentType],s=yield this.bufferViewData(a.bufferView);const c=new u(s.buffer,s.byteOffset+(a.byteOffset||0),t);u=e.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType],s=yield this.bufferViewData(o.bufferView);const l=new u((yield this.bufferViewData(o.bufferView)).buffer,s.byteOffset+(o.byteOffset||0),t*r);n.bufferView&&(i=new Uint8Array(i));const d=new e.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType](i.buffer);for(let e=0;e<t;e++)for(let t=0;t<r;t++)d[r*c[e]+t]=l[r*e+t]}return i}))}preFetchAll(){return r(this,void 0,void 0,(function*(){return Promise.all([this.bufferData.preFetchAll(),this.imageData.preFetchAll()])}))}};class o{constructor(t,e,n){this.bufferCache=[],this.asset=t,this.baseUri=e,this.manager=n,this.loader=new i.FileLoader(n),this.loader.responseType="arraybuffer"}get(t){return r(this,void 0,void 0,(function*(){if(void 0!==this.bufferCache[t])return this.bufferCache[t];const e=this.asset.gltf;if(!e.buffers)throw new Error("No buffers found.");const n=e.buffers[t];if(void 0===n.uri){if(0!==t)throw new Error("GLB container is required to be the first buffer");if(void 0===this.asset.glbData)throw new Error("invalid gltf: buffer has no uri nor is there a GLB buffer");return this.asset.glbData.binaryChunk}const r=s(n.uri,this.baseUri),i=yield this.loader.load(r),a=new Uint8Array(i);return this.bufferCache[t]=a,a}))}preFetchAll(){return r(this,void 0,void 0,(function*(){const t=this.asset.gltf.buffers;return t?Promise.all(t.map((t,e)=>this.get(e))):[]}))}}e.BufferData=o;class u{constructor(t,e,n){this.crossOrigin="anonymous",this.imageCache=[],this.asset=t,this.baseUri=e,this.manager=n}get(t){return r(this,void 0,void 0,(function*(){if(void 0!==this.imageCache[t])return this.imageCache[t];const e=this.asset.gltf;if(!e.images)throw new Error("No images found.");const n=e.images[t];let r,i=!1;if(void 0!==n.bufferView){const t=yield this.asset.bufferViewData(n.bufferView);i=!0;const e=new Blob([t],{type:n.mimeType});r=URL.createObjectURL(e)}else{if(void 0===n.uri)throw new Error("Invalid glTF: image must either have a `uri` or a `bufferView`");r=this.manager.resolveURL(s(n.uri,this.baseUri))}const a=new Image;return a.crossOrigin=this.crossOrigin,new Promise((e,n)=>{a.onerror=()=>{n(`Failed to load ${r}`),this.manager.itemEnd(r),this.manager.itemError(r)},a.onload=()=>{i&&URL.revokeObjectURL(r),this.imageCache[t]=a,e(a),this.manager.itemEnd(r)},a.src=r,this.manager.itemStart(r)})}))}preFetchAll(){return r(this,void 0,void 0,(function*(){const t=this.asset.gltf.images;return t?Promise.all(t.map((t,e)=>this.get(e))):[]}))}}function s(t,e){return"string"!=typeof t||""===t?"":/^(https?:)?\/\//i.test(t)?t:/^data:.*,.*$/i.test(t)?t:/^blob:.*$/i.test(t)?t:e+t}e.ImageData=u,e.resolveURL=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LoaderUtils=class{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(const n of t)e+=String.fromCharCode(n);return decodeURIComponent(escape(e))}static extractUrlBase(t){const e=t.split("/");return 1===e.length?"./":(e.pop(),e.join("/")+"/")}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.FileLoader=class{constructor(t){this.runningRequests={},this.manager=t}load(t,e){if(void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t),this.runningRequests[t])return this.runningRequests[t];const n=new Promise((n,r)=>{const i=new XMLHttpRequest;i.open("GET",t,!0);const a=this;i.onload=function(e){const o=this.response;0===this.status?(console.warn("FileLoader: HTTP Status 0 received."),n(o),a.manager.itemEnd(t)):200===this.status?(n(o),a.manager.itemEnd(t)):(r({url:t,status:this.status,statusText:i.statusText}),a.manager.itemEnd(t),a.manager.itemError(t)),delete a.runningRequests[t]},i.onprogress=t=>{e&&e(t)},i.onerror=function(e){r({url:t,status:this.status,statusText:i.statusText}),a.manager.itemEnd(t),a.manager.itemError(t),delete a.runningRequests[t]},this.responseType&&(i.responseType=this.responseType),this.withCredentials&&(i.withCredentials=this.withCredentials),this.mimeType&&i.overrideMimeType&&i.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const t in this.requestHeaders)i.setRequestHeader(t,this.requestHeaders[t]);i.send(null),this.manager.itemStart(t)});return this.runningRequests[t]=n,n}setRequestHeader(t,e){return this.requestHeaders[t]=e,this}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(2);e.BINARY_HEADER_MAGIC="glTF";const i=1313821514,a=5130562;e.GLTFBinaryData=class{constructor(t){const n=new DataView(t,0,12),o=r.LoaderUtils.decodeText(new Uint8Array(t,0,4)),u=n.getUint32(4,!0);if(n.getUint32(8,!0),o!==e.BINARY_HEADER_MAGIC)throw new Error("Unsupported glTF-Binary header.");if(u<2)throw new Error("Unsupported legacy binary file detected.");const s=new DataView(t,12);let c=0;for(;c<s.byteLength;){const e=s.getUint32(c,!0);c+=4;const n=s.getUint32(c,!0);if(c+=4,n===i){const n=new Uint8Array(t,12+c,e);this.json=r.LoaderUtils.decodeText(n)}else if(n===a){const n=12+c;this.binaryChunk=new Uint8Array(t,n,e)}c+=e}if(null===this.json)throw new Error("glTF-Binary: JSON content not found.")}}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){t.done?i(t.value):new n((function(e){e(t.value)})).then(o,u)}s((r=r.apply(t,e||[])).next())}))};function i(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}Object.defineProperty(e,"__esModule",{value:!0});const a=n(3),o=n(5),u=n(1),s=n(2),c=n(0),l=n(4);e.gltf=l,i(n(1)),i(n(0)),e.GltfLoader=class{constructor(t){this.manager=t||new c.LoadingManager}load(t,e){return r(this,void 0,void 0,(function*(){const n=s.LoaderUtils.extractUrlBase(t),r=new a.FileLoader(this.manager);r.responseType="arraybuffer";const i=yield r.load(t,e);return yield this.parse(i,n)}))}loadFromFiles(t){return r(this,void 0,void 0,(function*(){let e,n;for(const[r,i]of t)i.name.match(/\.(gltf|glb)$/)&&(e=i,n=r.replace(i.name,""));if(!e)throw new Error("No .gltf or .glb asset found.");const r="string"==typeof e?e:URL.createObjectURL(e),i=s.LoaderUtils.extractUrlBase(r),a=[];this.manager.urlModifier=e=>{const r=n+e.replace(i,"").replace(/^(\.?\/)/,"");if(t.has(r)){const e=t.get(r),n=URL.createObjectURL(e);return a.push(n),n}return e};const o=yield this.load(r);return yield o.preFetchAll(),URL.revokeObjectURL(r),a.forEach(URL.revokeObjectURL),o}))}parse(t,e){return r(this,void 0,void 0,(function*(){let n,r=void 0;n="string"==typeof t?t:s.LoaderUtils.decodeText(new Uint8Array(t,0,4))===o.BINARY_HEADER_MAGIC?(r=new o.GLTFBinaryData(t)).json:s.LoaderUtils.decodeText(new Uint8Array(t));const i=JSON.parse(n);if(void 0===i.asset||i.asset.version[0]<2)throw new Error("Unsupported asset. glTF versions >=2.0 are supported.");return new u.GltfAsset(i,e,r,this.manager)}))}}},function(t,e,n){t.exports=n(6)}])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n){this.data=t,this.width=e,this.height=n}return t.prototype.getData=function(){return this.data},t.prototype.getWidth=function(){return this.width},t.prototype.getHeight=function(){return this.height},t}();e.Texture=r},function(t,e){var n="#\\?RADIANCE",r="#.*",i="EXPOSURE=\\s*([0-9]*[.][0-9]*)",a="FORMAT=32-bit_rle_rgbe",o="-Y ([0-9]+) \\+X ([0-9]+)";t.exports=function(t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var e=0,u=t.length,s=10;function c(){var n="";do{var r=t[e];if(r==s){++e;break}n+=String.fromCharCode(r)}while(++e<u);return n}for(var l=0,d=0,f=1,h=!1,m=0;m<20;m++){var g,v=c();if(g=v.match(n));else if(g=v.match(a))h=!0;else if(g=v.match(i))f=Number(g[1]);else if(g=v.match(r));else if(g=v.match(o)){d=Number(g[1]),l=Number(g[2]);break}}if(!h)throw new Error("File is not run length encoded!");var p=new Uint8Array(l*d*4);!function(t,e,n,r,i,a){var o,u,s,c=new Array(4),l=null,d=new Array(2),f=t.length;function h(e){var n=0;do{e[n++]=t[r]}while(++r<f&&n<e.length);return n}function m(e,n,i){var a=0;do{e[n+a++]=t[r]}while(++r<f&&a<i);return a}function g(t,e,n,r){var i=4*r,a=m(e,n,i);if(a<i)throw new Error("Error reading raw pixels: got "+a+" bytes, expected "+i)}for(;a>0;){if(h(c)<c.length)throw new Error("Error reading bytes: expected "+c.length);if(2!=c[0]||2!=c[1]||0!=(128&c[2]))return e[n++]=c[0],e[n++]=c[1],e[n++]=c[2],e[n++]=c[3],void g(0,e,n,i*a-1);if(((255&c[2])<<8|255&c[3])!=i)throw new Error("Wrong scanline width "+((255&c[2])<<8|255&c[3])+", expected "+i);null==l&&(l=new Array(4*i)),o=0;for(var v=0;v<4;v++)for(u=(v+1)*i;o<u;){if(h(d)<d.length)throw new Error("Error reading 2-byte buffer");if((255&d[0])>128){if(0==(s=(255&d[0])-128)||s>u-o)throw new Error("Bad scanline data");for(;s-- >0;)l[o++]=d[1]}else{if(0==(s=255&d[0])||s>u-o)throw new Error("Bad scanline data");if(l[o++]=d[1],--s>0){if(m(l,o,s)<s)throw new Error("Error reading non-run data");o+=s}}}for(v=0;v<i;v++)e[n+0]=l[v],e[n+1]=l[v+i],e[n+2]=l[v+2*i],e[n+3]=l[v+3*i],n+=4;a--}}(t,p,0,e,l,d);for(var y=new Float32Array(l*d*4),b=0;b<p.length;b+=4){var T=p[b+0]/255,x=p[b+1]/255,M=p[b+2]/255,E=p[b+3],w=Math.pow(2,E-128);T*=w,x*=w,M*=w;var S=b;y[S+0]=T,y[S+1]=x,y[S+2]=M,y[S+3]=1}return{shape:[l,d],exposure:f,gamma:1,data:y}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(23),i=function(){function t(t){this.camera=t,this.triangles=[],this.materials=[],this.lights=[]}return t.prototype.getCamera=function(){return this.camera},t.prototype.getTriangles=function(){return this.triangles},t.prototype.getMaterials=function(){return this.materials},t.prototype.getLights=function(){return this.lights},t.prototype.getSkydome=function(){return this.skydome},t.prototype.getBVH=function(){return this.bvh},t.prototype.setLights=function(t){void 0===t&&(t=[]),this.lights=t},t.prototype.setTriangles=function(t){void 0===t&&(t=[]),this.triangles=t,this.bvh=new r.BVH(this.triangles)},t.prototype.addTriangles=function(t){void 0===t&&(t=[]),this.triangles=this.triangles.concat(t),this.bvh=new r.BVH(this.triangles)},t.prototype.setMaterials=function(t){void 0===t&&(t=[]),this.materials=t},t.prototype.addMaterials=function(t){void 0===t&&(t=[]),this.materials=this.materials.concat(t)},t.prototype.setSkydome=function(t){this.skydome=t},t}();e.Scene=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),i=n(0),a=function(){function t(t){var e=performance.now();this.nodeList=[],this.triangles=t,this.triangleIndices=new Array(this.triangles.length);for(var n=0;n<this.triangles.length;n++)this.triangleIndices[n]=n;this.root=new r.BoundingBox(0),this.root.first=0,this.root.count=this.triangles.length,this.nodeList.push(this.root),this.calculateBounds(this.root),this.subdivide(this.root,0),this.buildTime=performance.now()-e,console.log("BVH build time",this.buildTime)}return t.prototype.getRoot=function(){return this.root},t.prototype.getTriangleIndices=function(){return this.triangleIndices},t.prototype.getNodeList=function(){return this.nodeList},t.prototype.calculateBounds=function(t){for(var e=-1/0,n=-1/0,r=-1/0,a=1/0,o=1/0,u=1/0,s=t.first;s<t.first+t.count;s++){var c=this.triangleIndices[s];a=Math.min(this.triangles[c].getBoundingBox().min[0],a),o=Math.min(this.triangles[c].getBoundingBox().min[1],o),u=Math.min(this.triangles[c].getBoundingBox().min[2],u),e=Math.max(this.triangles[c].getBoundingBox().max[0],e),n=Math.max(this.triangles[c].getBoundingBox().max[1],n),r=Math.max(this.triangles[c].getBoundingBox().max[2],r)}t.min=i.vec3.fromValues(a,o,u),t.max=i.vec3.fromValues(e,n,r),t.calculateCenter()},t.prototype.subdivide=function(t,e){if(t.count<=3||e>=25)return t.isLeaf=!0,void(t.count>15&&console.log("node; depth:",t,e));t.isLeaf=!1,t.left=new r.BoundingBox(this.nodeList.length),this.nodeList.push(t.left),t.right=new r.BoundingBox(this.nodeList.length),this.nodeList.push(t.right),this.partition(t),e++,this.subdivide(t.left,e),this.subdivide(t.right,e)},t.prototype.partition=function(t){for(var e=1/0,n=1,r=t.count-n,a=new Array(t.count),o=0;o<t.count;o++)a[o]=this.triangleIndices[t.first+o];var u=[],s=i.vec3.subtract(i.vec3.create(),t.max,t.min);s[0]=s[0]/10,s[1]=s[1]/10,s[2]=s[2]/10,0==s[0]&&(s[0]=1),0==s[1]&&(s[1]=1),0==s[2]&&(s[2]=1);for(var c=0;c<3;c++){for(o=0;o<10;o++)u[o]=[];for(o=t.first;o<t.first+t.count;o++){var l=this.triangleIndices[o],d=void 0;0==c?d=Math.floor((this.triangles[l].getBoundingBox().getCenter()[0]-t.min[0])/s[0]):1==c?d=Math.floor((this.triangles[l].getBoundingBox().getCenter()[1]-t.min[1])/s[1]):2==c&&(d=Math.floor((this.triangles[l].getBoundingBox().getCenter()[2]-t.min[2])/s[2])),u[d=Math.min(9,d)].push(l)}var f=0;for(o=0;o<10;o++)for(var h=0;h<u[o].length;h++)this.triangleIndices[t.first+f]=u[o][h],f++;for(o=0;o<9;o++){var m,g=0;for(h=0;h<=o;h++)g+=u[h].length;if(m=t.count-g,0!=g&&0!=m){t.left.first=t.first,t.left.count=g,this.calculateBounds(t.left),t.right.first=t.first+g,t.right.count=m,this.calculateBounds(t.right);var v=t.left.calculateSurfaceArea(),p=t.right.calculateSurfaceArea(),y=v*t.left.count+p*t.right.count;if(y<e&&y<(v+p)*t.count){e=y,n=g,r=m;for(h=0;h<t.count;h++)a[h]=this.triangleIndices[t.first+h]}}}}for(o=0;o<t.count;o++)this.triangleIndices[t.first+o]=a[o];t.left.first=t.first,t.left.count=n,this.calculateBounds(t.left),t.right.first=t.first+n,t.right.count=r,this.calculateBounds(t.right)},t.prototype.getBuildingTime=function(){return this.buildTime},t}();e.BVH=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,